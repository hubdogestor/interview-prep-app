{
  "version": 3,
  "sources": [],
  "debugId": "3a14d965-98c4-b68d-9bba-b1b789e1d2bd",
  "sections": [
    {"offset": {"line": 1, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/execAsync.ts","turbopack:///[project]/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId-bsd.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as child_process from 'child_process';\nimport * as util from 'util';\n\nexport const execAsync = util.promisify(child_process.exec);\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { promises as fs } from 'fs';\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string | undefined> {\n  try {\n    const result = await fs.readFile('/etc/hostid', { encoding: 'utf8' });\n    return result.trim();\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  try {\n    const result = await execAsync('kenv -q smbios.system.uuid');\n    return result.stdout.trim();\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return undefined;\n}\n"],"names":[],"mappings":"uCAgBA,IAAA,EAA+B,CAAe,AAAvC,CAAwC,CAAA,CAAA,EAAnC,KAGL,IAAM,EAFgB,AAEJ,EAHA,AACI,CAAA,CAAA,AAEA,CAAC,EAAR,CAHS,GAGD,SAAS,CAAC,EAAc,IAAI,CAAC,CAAC,KAAP,CAAC,yCCHtD,IAAA,EAAoC,CAA7B,CAA6B,CAA3B,AAA2B,CAAA,OAAnB,AACjB,EAAwC,CAAjC,CADc,AACmB,CAA/B,AAA+B,CAAA,AADjB,EAAE,KAEzB,CADkB,AADa,CAEW,CADtB,AACb,CAAmC,CAFP,AAE1B,AAAiC,CAAA,AAFN,GACV,AACb,EAAE,CAER,KAFc,AAET,KAH2B,CAAC,IAGlB,IACpB,GAAI,CAEF,EALqC,CAAC,CAER,EAGvB,CADQ,KACF,CADQ,EAAA,QAAE,CAAC,QAAQ,CAAC,aAAa,CAAE,CAAE,QAAQ,CAAE,MAAM,EAAE,CAAC,CAAC,AACxD,IAAI,EAAE,CAAC,AACtB,AAAC,MAAO,CAAC,CAAE,CACV,EAAA,IAAI,CAAC,KAAK,CAAC,CAAA,0BAAA,EAA6B,CAAC,CAAA,CAAE,CAAC,CAAC,AAC9C,AAED,GAAI,CAEF,MAAO,CADQ,KACF,CADE,CAAA,EAAM,EAAA,SAAA,AAAS,EAAC,6BAA4B,CAAC,CAAC,AAC/C,MAAM,CAAC,IAAI,EAAE,CAAC,AAC7B,AAAC,MAAO,CAAC,CAAE,CACV,EAAA,IAAI,CAAC,KAAK,CAAC,CAAA,0BAAA,EAA6B,CAAC,CAAA,CAAE,CAAC,CAAC,AAC9C,AAGH,CAAC"}}]
}