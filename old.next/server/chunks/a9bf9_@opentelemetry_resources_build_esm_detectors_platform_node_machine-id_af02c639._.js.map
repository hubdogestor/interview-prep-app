{
  "version": 3,
  "sources": [],
  "debugId": "ba7b085a-2bbd-270b-9aa4-4cbed5a9703f",
  "sections": [
    {"offset": {"line": 1, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/execAsync.ts","turbopack:///[project]/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId-win.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as child_process from 'child_process';\nimport * as util from 'util';\n\nexport const execAsync = util.promisify(child_process.exec);\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as process from 'process';\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string | undefined> {\n  const args =\n    'QUERY HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Cryptography /v MachineGuid';\n  let command = '%windir%\\\\System32\\\\REG.exe';\n  if (process.arch === 'ia32' && 'PROCESSOR_ARCHITEW6432' in process.env) {\n    command = '%windir%\\\\sysnative\\\\cmd.exe /c ' + command;\n  }\n\n  try {\n    const result = await execAsync(`${command} ${args}`);\n    const parts = result.stdout.split('REG_SZ');\n    if (parts.length === 2) {\n      return parts[1].trim();\n    }\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return undefined;\n}\n"],"names":[],"mappings":"uCAgBA,IAAA,EAA+B,CAAe,AAAvC,CAAwC,CAAA,CAAA,EAAnC,KAGL,IAAM,EAFgB,AAEJ,EAHA,AACI,CAAA,CAAA,AAEA,CAAC,EAAR,CAHS,GAGD,SAAS,CAAC,EAAc,IAAI,CAAC,CAAC,KAAP,CAAC,yCCHtD,IAAA,EAAmC,CAA5B,CAA4B,CAAA,CAAA,EAAvB,IACZ,EAAwC,CADrB,AACZ,CAAiC,CAA/B,AAA+B,CAAA,GADf,IAEzB,CADkB,CACwB,CADtB,AACb,CAAmC,CAFR,AAEzB,AAAiC,CAAA,AAFP,GACT,AACb,EAAE,CAER,KAFc,AAET,KAH2B,CAAC,IAGlB,IAGpB,IAAI,EALmC,AAKzB,CAL0B,CAER,GAGrB,wBAAgC,AACvC,CAAiB,AADuB,MACjC,AAAgB,CAAf,IAAA,IAAI,EAAe,wBAAwB,GAAI,EAAQ,GAAG,EAAJ,AAAM,CACtE,AADiE,EACvD,KAAH,6BAAqC,CAAG,CAAA,CAAO,CAAC,AAGzD,GAAI,CAEF,IAAM,EAAQ,CADC,EACJ,GAAS,CADL,CAAA,EAAM,EAAA,SAAA,AAAS,EAAC,GAAG,OAAO,CAAA,CAAA,EAAI,IAAI,gEAAE,CAAC,CAC/B,AADgC,MAC1B,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,AAC5C,GAAqB,CAAC,EAAE,CAApB,EAAM,GAAD,GAAO,CACd,OAAO,CAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAExB,AAAD,AAF0B,MAElB,CAAC,CAAE,CACV,EAAA,IAAI,CAAC,KAAK,CAAC,CAAA,0BAAA,EAA6B,CAAC,CAAA,CAAE,CAAC,CAAC,AAC9C,AAGH,CAAC"}}]
}