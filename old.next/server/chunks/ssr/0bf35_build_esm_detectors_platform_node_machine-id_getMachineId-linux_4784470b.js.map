{
  "version": 3,
  "sources": [],
  "debugId": "f5005f7e-b3b2-b08a-ada4-d413b3b675c5",
  "sections": [
    {"offset": {"line": 1, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId-linux.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { promises as fs } from 'fs';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string | undefined> {\n  const paths = ['/etc/machine-id', '/var/lib/dbus/machine-id'];\n\n  for (const path of paths) {\n    try {\n      const result = await fs.readFile(path, { encoding: 'utf8' });\n      return result.trim();\n    } catch (e) {\n      diag.debug(`error reading machine id: ${e}`);\n    }\n  }\n\n  return undefined;\n}\n"],"names":[],"mappings":"uCAeA,IAAA,EAAoC,CAA7B,CAA6B,CAA3B,AAA2B,CAAA,OAAnB,AACjB,EAA0C,CAAnC,CADc,AACqB,CAAA,AAAjC,CAAiC,AADnB,EAAE,CACZ,EAAE,EAER,CAHwB,GACV,CADc,AAGvB,CAHwB,SAGd,IAGpB,IAAK,CALkC,CAAC,EAER,AAGrB,IAFG,AAEC,CAFA,GAEI,KAAK,CAAE,QAFM,CAAE,0BAA0B,CAAC,CAG3D,AAH4D,GAGxD,CAEF,MAAO,CADQ,KACF,CADQ,EAAA,QAAE,CAAC,QAAQ,CAAC,EAAM,CAAE,CAAJ,OAAY,CAAE,MAAM,EAAE,CAAC,CAAC,AAC/C,IAAI,EAAE,CACpB,AAAD,AADsB,MACd,CAAC,CAAE,CACV,EAAA,IAAI,CAAC,KAAK,CAAC,CAAA,0BAAA,EAA6B,CAAC,CAAA,CAAE,CAAC,CAAC,AAC9C,AAIL,CAAC"}}]
}