{
  "version": 3,
  "sources": [],
  "debugId": "8cc95a3b-e2c0-0ad1-699e-56437cf70b04",
  "sections": [
    {"offset": {"line": 1, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/execAsync.ts","turbopack:///[project]/node_modules/@opentelemetry/resources/src/detectors/platform/node/machine-id/getMachineId-darwin.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as child_process from 'child_process';\nimport * as util from 'util';\n\nexport const execAsync = util.promisify(child_process.exec);\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { execAsync } from './execAsync';\nimport { diag } from '@opentelemetry/api';\n\nexport async function getMachineId(): Promise<string | undefined> {\n  try {\n    const result = await execAsync('ioreg -rd1 -c \"IOPlatformExpertDevice\"');\n\n    const idLine = result.stdout\n      .split('\\n')\n      .find(line => line.includes('IOPlatformUUID'));\n\n    if (!idLine) {\n      return undefined;\n    }\n\n    const parts = idLine.split('\" = \"');\n    if (parts.length === 2) {\n      return parts[1].slice(0, -1);\n    }\n  } catch (e) {\n    diag.debug(`error reading machine id: ${e}`);\n  }\n\n  return undefined;\n}\n"],"names":[],"mappings":"uCAgBA,IAAA,EAA+B,CAAe,AAAvC,CAAwC,CAAA,CAAA,EAAnC,KAGL,IAAM,EAFgB,AAEJ,EAHA,AACI,CAAA,CAAA,AAEA,CAAC,EAAR,CAHS,GAGD,SAAS,CAAC,EAAc,IAAI,CAAC,CAAC,KAAP,CAAC,yCCHtD,IAAA,EAAwC,CAAjC,CAAiC,CAA/B,AAA+B,CAAA,OACxC,CADkB,CACwB,CAAnC,AADa,CACsB,CAAjC,AAAiC,CAAA,GADhB,AACb,EAAE,EAER,IAFc,CAET,IAH2B,CAAC,KAGlB,IACpB,GAAI,CAGF,CANqC,CAAC,EAER,AAIxB,EAAS,CAFA,GAEH,EAAS,CAFN,CAAA,EAAM,EAAA,SAAA,AAAS,EAAC,yCAAwC,CAAC,CAAC,AAEnD,MAAM,CACzB,KAAK,CAAC,IAAI,CAAC,CACX,IAAI,CAAA,AAAC,GAAQ,CAAJ,CAAC,AAAQ,EAAD,MAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,AAEjD,GAAI,CAAC,EACH,IADS,EAAE,CAIb,AAHS,IAGH,EAAQ,EAAO,CAAV,AAHO,CAAC,EAGC,CAAM,CAAC,OAAO,CAAC,CAAC,AACpC,GAAqB,CAAC,EAAE,CAApB,EAAM,GAAD,GAAO,CACd,OAAO,CAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAAC,AAEhC,AAAC,MAAO,CAAC,CAAE,CACV,EAAA,IAAI,CAAC,KAAK,CAAC,CAAA,0BAAA,EAA6B,CAAC,CAAA,CAAE,CAAC,CAAC,AAC9C,AAGH,CAAC"}}]
}