{"version":3,"sources":["turbopack:///[project]/node_modules/@sentry/core/src/utils/version.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/worldwide.ts","turbopack:///[project]/node_modules/@sentry/core/src/carrier.ts","turbopack:///[project]/node_modules/@sentry/core/src/debug-build.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/is.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/browser.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/debug-logger.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/spanOnScope.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/time.ts","turbopack:///[project]/node_modules/@sentry/core/src/defaultScopes.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/misc.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/propagationContext.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/merge.ts","turbopack:///[project]/node_modules/@sentry/core/src/currentScopes.ts","turbopack:///[project]/node_modules/@sentry/core/src/asyncContext/stackStrategy.ts","turbopack:///[project]/node_modules/@sentry/core/src/asyncContext/index.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/string.ts","turbopack:///[project]/node_modules/@sentry/core/src/session.ts","turbopack:///[project]/node_modules/@sentry/core/src/scope.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/object.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/request.ts","turbopack:///[project]/node_modules/@sentry/core/src/constants.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/syncpromise.ts","turbopack:///[project]/node_modules/@sentry/core/src/eventProcessors.ts","turbopack:///[project]/node_modules/@sentry/core/src/semanticAttributes.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/dsn.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/baggage.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/hasSpansEnabled.ts","turbopack:///[project]/node_modules/@sentry/core/src/tracing/spanstatus.ts","turbopack:///[project]/node_modules/@sentry/core/src/tracing/utils.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/tracing.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/parseSampleRate.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/spanUtils.ts","turbopack:///[project]/node_modules/@sentry/core/src/tracing/dynamicSamplingContext.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/debug-ids.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/applyScopeDataToEvent.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/stacktrace.ts","turbopack:///[project]/node_modules/@sentry/core/src/exports.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/normalize.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/prepareEvent.ts","turbopack:///[project]/node_modules/@sentry/core/src/utils/vercelWaitUntil.ts","turbopack:///[project]/node_modules/@sentry/nextjs/src/common/utils/responseEnd.ts","turbopack:///[project]/node_modules/@sentry/nextjs/src/common/debug-build.ts"],"sourcesContent":["// This is a magic string replaced by rollup\ndeclare const __SENTRY_SDK_VERSION__: string;\n\nexport const SDK_VERSION = typeof __SENTRY_SDK_VERSION__ === 'string' ? __SENTRY_SDK_VERSION__ : '0.0.0-unknown.0';\n","/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the `debug` singleton, or b) put your function elsewhere.\n *\n * Note: This file was originally called `global.ts`, but was changed to unblock users which might be doing\n * string replaces with bundlers like Vite for `global` (would break imports that rely on importing from utils/src/global).\n *\n * Why worldwide?\n *\n * Why not?\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type { Carrier } from '../carrier';\nimport type { SdkSource } from './env';\n\n/** Internal global with common properties and Sentry extensions  */\nexport type InternalGlobal = {\n  navigator?: { userAgent?: string; maxTouchPoints?: number };\n  console: Console;\n  PerformanceObserver?: any;\n  Sentry?: any;\n  onerror?: {\n    (event: object | string, source?: string, lineno?: number, colno?: number, error?: Error): any;\n    __SENTRY_INSTRUMENTED__?: true;\n  };\n  onunhandledrejection?: {\n    (event: unknown): boolean;\n    __SENTRY_INSTRUMENTED__?: true;\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  SENTRY_SDK_SOURCE?: SdkSource;\n  /**\n   * Debug IDs are indirectly injected by Sentry CLI or bundler plugins to directly reference a particular source map\n   * for resolving of a source file. The injected code will place an entry into the record for each loaded bundle/JS\n   * file.\n   */\n  _sentryDebugIds?: Record<string, string>;\n  /**\n   * Native debug IDs implementation (e.g., from Vercel).\n   * This uses the same format as _sentryDebugIds but with a different global name.\n   * Keys are `error.stack` strings, values are debug IDs.\n   */\n  _debugIds?: Record<string, string>;\n  /**\n   * Raw module metadata that is injected by bundler plugins.\n   *\n   * Keys are `error.stack` strings, values are the metadata.\n   */\n  _sentryModuleMetadata?: Record<string, any>;\n  _sentryEsmLoaderHookRegistered?: boolean;\n  _sentryInjectLoaderHookRegister?: () => void;\n  _sentryInjectLoaderHookRegistered?: boolean;\n} & Carrier;\n\n/** Get's the global object for the current JavaScript runtime */\nexport const GLOBAL_OBJ = globalThis as unknown as InternalGlobal;\n","import type { AsyncContextStack } from './asyncContext/stackStrategy';\nimport type { AsyncContextStrategy } from './asyncContext/types';\nimport type { Client } from './client';\nimport type { Scope } from './scope';\nimport type { SerializedLog } from './types-hoist/log';\nimport type { SerializedMetric } from './types-hoist/metric';\nimport { SDK_VERSION } from './utils/version';\nimport { GLOBAL_OBJ } from './utils/worldwide';\n\n/**\n * An object that contains globally accessible properties and maintains a scope stack.\n * @hidden\n */\nexport interface Carrier {\n  __SENTRY__?: VersionedCarrier;\n}\n\ntype VersionedCarrier = {\n  version?: string;\n} & Record<Exclude<string, 'version'>, SentryCarrier>;\n\nexport interface SentryCarrier {\n  acs?: AsyncContextStrategy;\n  stack?: AsyncContextStack;\n\n  globalScope?: Scope;\n  defaultIsolationScope?: Scope;\n  defaultCurrentScope?: Scope;\n  loggerSettings?: { enabled: boolean };\n  /**\n   * A map of Sentry clients to their log buffers.\n   * This is used to store logs that are sent to Sentry.\n   */\n  clientToLogBufferMap?: WeakMap<Client, Array<SerializedLog>>;\n\n  /**\n   * A map of Sentry clients to their metric buffers.\n   * This is used to store metrics that are sent to Sentry.\n   */\n  clientToMetricBufferMap?: WeakMap<Client, Array<SerializedMetric>>;\n\n  /** Overwrites TextEncoder used in `@sentry/core`, need for `react-native@0.73` and older */\n  encodePolyfill?: (input: string) => Uint8Array;\n  /** Overwrites TextDecoder used in `@sentry/core`, need for `react-native@0.73` and older */\n  decodePolyfill?: (input: Uint8Array) => string;\n}\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nexport function getMainCarrier(): Carrier {\n  // This ensures a Sentry carrier exists\n  getSentryCarrier(GLOBAL_OBJ);\n  return GLOBAL_OBJ;\n}\n\n/** Will either get the existing sentry carrier, or create a new one. */\nexport function getSentryCarrier(carrier: Carrier): SentryCarrier {\n  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});\n\n  // For now: First SDK that sets the .version property wins\n  __SENTRY__.version = __SENTRY__.version || SDK_VERSION;\n\n  // Intentionally populating and returning the version of \"this\" SDK instance\n  // rather than what's set in .version so that \"this\" SDK always gets its carrier\n  return (__SENTRY__[SDK_VERSION] = __SENTRY__[SDK_VERSION] || {});\n}\n\n/**\n * Returns a global singleton contained in the global `__SENTRY__[]` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */\nexport function getGlobalSingleton<Prop extends keyof SentryCarrier>(\n  name: Prop,\n  creator: () => NonNullable<SentryCarrier[Prop]>,\n  obj = GLOBAL_OBJ,\n): NonNullable<SentryCarrier[Prop]> {\n  const __SENTRY__ = (obj.__SENTRY__ = obj.__SENTRY__ || {});\n  const carrier = (__SENTRY__[SDK_VERSION] = __SENTRY__[SDK_VERSION] || {});\n  // Note: We do not want to set `carrier.version` here, as this may be called before any `init` is called, e.g. for the default scopes\n  return carrier[name] || (carrier[name] = creator());\n}\n","declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type { Primitive } from '../types-hoist/misc';\nimport type { ParameterizedString } from '../types-hoist/parameterize';\nimport type { PolymorphicEvent } from '../types-hoist/polymorphics';\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: unknown): wat is Error {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n    case '[object WebAssembly.Exception]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */\nfunction isBuiltin(wat: unknown, className: string): boolean {\n  return objectToString.call(wat) === `[object ${className}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: unknown): boolean {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: unknown): wat is string {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given string is parameterized\n * {@link isParameterizedString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isParameterizedString(wat: unknown): wat is ParameterizedString {\n  return (\n    typeof wat === 'object' &&\n    wat !== null &&\n    '__sentry_template_string__' in wat &&\n    '__sentry_template_values__' in wat\n  );\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: unknown): wat is Primitive {\n  return wat === null || isParameterizedString(wat) || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal, or a class instance.\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: unknown): wat is Record<string, unknown> {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: unknown): wat is PolymorphicEvent {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: unknown): boolean {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: unknown): wat is RegExp {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): wat is PromiseLike<any> {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat?.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: unknown): boolean {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    return wat instanceof base;\n  } catch {\n    return false;\n  }\n}\n\ninterface VueViewModel {\n  // Vue3\n  __isVue?: boolean;\n  // Vue2\n  _isVue?: boolean;\n}\n/**\n * Checks whether given value's type is a Vue ViewModel.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isVueViewModel(wat: unknown): boolean {\n  // Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.\n  return !!(typeof wat === 'object' && wat !== null && ((wat as VueViewModel).__isVue || (wat as VueViewModel)._isVue));\n}\n\n/**\n * Checks whether the given parameter is a Standard Web API Request instance.\n *\n * Returns false if Request is not available in the current runtime.\n */\nexport function isRequest(request: unknown): request is Request {\n  return typeof Request !== 'undefined' && isInstanceOf(request, Request);\n}\n","import { isString } from './is';\nimport { GLOBAL_OBJ } from './worldwide';\n\nconst WINDOW = GLOBAL_OBJ as unknown as Window;\n\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\ntype SimpleNode = {\n  parentNode: SimpleNode;\n} | null;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(\n  elem: unknown,\n  options: string[] | { keyAttrs?: string[]; maxStringLength?: number } = {},\n): string {\n  if (!elem) {\n    return '<unknown>';\n  }\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    const maxStringLength = (!Array.isArray(options) && options.maxStringLength) || DEFAULT_MAX_STRING_LENGTH;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n\n  if (!elem?.tagName) {\n    return '';\n  }\n\n  // @ts-expect-error WINDOW has HTMLElement\n  if (WINDOW.HTMLElement) {\n    // If using the component name annotation plugin, this value may be available on the DOM node\n    if (elem instanceof HTMLElement && elem.dataset) {\n      if (elem.dataset['sentryComponent']) {\n        return elem.dataset['sentryComponent'];\n      }\n      if (elem.dataset['sentryElement']) {\n        return elem.dataset['sentryElement'];\n      }\n    }\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs = keyAttrs?.length\n    ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n    : null;\n\n  if (keyAttrPairs?.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    const className = elem.className;\n    if (className && isString(className)) {\n      const classes = className.split(/\\s+/);\n      for (const c of classes) {\n        out.push(`.${c}`);\n      }\n    }\n  }\n  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (const k of allowedAttrs) {\n    const attr = elem.getAttribute(k);\n    if (attr) {\n      out.push(`[${k}=\"${attr}\"]`);\n    }\n  }\n\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  try {\n    return WINDOW.document.location.href;\n  } catch {\n    return '';\n  }\n}\n\n/**\n * Given a DOM element, traverses up the tree until it finds the first ancestor node\n * that has the `data-sentry-component` or `data-sentry-element` attribute with `data-sentry-component` taking\n * precedence. This attribute is added at build-time by projects that have the component name annotation plugin installed.\n *\n * @returns a string representation of the component for the provided DOM element, or `null` if not found\n */\nexport function getComponentName(elem: unknown): string | null {\n  // @ts-expect-error WINDOW has HTMLElement\n  if (!WINDOW.HTMLElement) {\n    return null;\n  }\n\n  let currentElem = elem as SimpleNode;\n  const MAX_TRAVERSE_HEIGHT = 5;\n  for (let i = 0; i < MAX_TRAVERSE_HEIGHT; i++) {\n    if (!currentElem) {\n      return null;\n    }\n\n    if (currentElem instanceof HTMLElement) {\n      if (currentElem.dataset['sentryComponent']) {\n        return currentElem.dataset['sentryComponent'];\n      }\n      if (currentElem.dataset['sentryElement']) {\n        return currentElem.dataset['sentryElement'];\n      }\n    }\n\n    currentElem = currentElem.parentNode;\n  }\n\n  return null;\n}\n","import { getGlobalSingleton } from '../carrier';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { ConsoleLevel } from '../types-hoist/instrument';\nimport { GLOBAL_OBJ } from './worldwide';\n\nexport interface SentryDebugLogger {\n  disable(): void;\n  enable(): void;\n  isEnabled(): boolean;\n  log(...args: Parameters<typeof console.log>): void;\n  warn(...args: Parameters<typeof console.warn>): void;\n  error(...args: Parameters<typeof console.error>): void;\n}\n\nexport const CONSOLE_LEVELS: readonly ConsoleLevel[] = [\n  'debug',\n  'info',\n  'warn',\n  'error',\n  'log',\n  'assert',\n  'trace',\n] as const;\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** This may be mutated by the console instrumentation. */\nexport const originalConsoleMethods: Partial<{\n  log(...args: Parameters<typeof console.log>): void;\n  info(...args: Parameters<typeof console.info>): void;\n  warn(...args: Parameters<typeof console.warn>): void;\n  error(...args: Parameters<typeof console.error>): void;\n  debug(...args: Parameters<typeof console.debug>): void;\n  assert(...args: Parameters<typeof console.assert>): void;\n  trace(...args: Parameters<typeof console.trace>): void;\n}> = {};\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const console = GLOBAL_OBJ.console;\n  const wrappedFuncs: Partial<Record<ConsoleLevel, (...args: unknown[]) => void>> = {};\n\n  const wrappedLevels = Object.keys(originalConsoleMethods) as ConsoleLevel[];\n\n  // Restore all wrapped console methods\n  wrappedLevels.forEach(level => {\n    const originalConsoleMethod = originalConsoleMethods[level];\n    wrappedFuncs[level] = console[level] as (...args: unknown[]) => void;\n    console[level] = originalConsoleMethod as (...args: unknown[]) => void;\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    wrappedLevels.forEach(level => {\n      console[level] = wrappedFuncs[level] as (...args: unknown[]) => void;\n    });\n  }\n}\n\nfunction enable(): void {\n  _getLoggerSettings().enabled = true;\n}\n\nfunction disable(): void {\n  _getLoggerSettings().enabled = false;\n}\n\nfunction isEnabled(): boolean {\n  return _getLoggerSettings().enabled;\n}\n\nfunction log(...args: Parameters<typeof console.log>): void {\n  _maybeLog('log', ...args);\n}\n\nfunction info(...args: Parameters<typeof console.info>): void {\n  _maybeLog('info', ...args);\n}\n\nfunction warn(...args: Parameters<typeof console.warn>): void {\n  _maybeLog('warn', ...args);\n}\n\nfunction error(...args: Parameters<typeof console.error>): void {\n  _maybeLog('error', ...args);\n}\n\nfunction _maybeLog(level: ConsoleLevel, ...args: Parameters<(typeof console)[typeof level]>): void {\n  if (!DEBUG_BUILD) {\n    return;\n  }\n\n  if (isEnabled()) {\n    consoleSandbox(() => {\n      GLOBAL_OBJ.console[level](`${PREFIX}[${level}]:`, ...args);\n    });\n  }\n}\n\nfunction _getLoggerSettings(): { enabled: boolean } {\n  if (!DEBUG_BUILD) {\n    return { enabled: false };\n  }\n\n  return getGlobalSingleton('loggerSettings', () => ({ enabled: false }));\n}\n\n/**\n * This is a logger singleton which either logs things or no-ops if logging is not enabled.\n */\nexport const debug = {\n  /** Enable logging. */\n  enable,\n  /** Disable logging. */\n  disable,\n  /** Check if logging is enabled. */\n  isEnabled,\n  /** Log a message. */\n  log,\n  /** Log a warning. */\n  warn,\n  /** Log an error. */\n  error,\n} satisfies SentryDebugLogger;\n","import type { Scope } from '../scope';\nimport type { Span } from '../types-hoist/span';\nimport { addNonEnumerableProperty } from '../utils/object';\n\nconst SCOPE_SPAN_FIELD = '_sentrySpan';\n\ntype ScopeWithMaybeSpan = Scope & {\n  [SCOPE_SPAN_FIELD]?: Span;\n};\n\n/**\n * Set the active span for a given scope.\n * NOTE: This should NOT be used directly, but is only used internally by the trace methods.\n */\nexport function _setSpanForScope(scope: Scope, span: Span | undefined): void {\n  if (span) {\n    addNonEnumerableProperty(scope as ScopeWithMaybeSpan, SCOPE_SPAN_FIELD, span);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete (scope as ScopeWithMaybeSpan)[SCOPE_SPAN_FIELD];\n  }\n}\n\n/**\n * Get the active span for a given scope.\n * NOTE: This should NOT be used directly, but is only used internally by the trace methods.\n */\nexport function _getSpanForScope(scope: ScopeWithMaybeSpan): Span | undefined {\n  return scope[SCOPE_SPAN_FIELD];\n}\n","import { GLOBAL_OBJ } from './worldwide';\n\nconst ONE_SECOND_IN_MS = 1000;\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\ninterface Performance {\n  /**\n   * The millisecond timestamp at which measurement began, measured in Unix time.\n   */\n  timeOrigin: number;\n  /**\n   * Returns the current millisecond timestamp, where 0 represents the start of measurement.\n   */\n  now(): number;\n}\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nexport function dateTimestampInSeconds(): number {\n  return Date.now() / ONE_SECOND_IN_MS;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction createUnixTimestampInSecondsFunc(): () => number {\n  const { performance } = GLOBAL_OBJ as typeof GLOBAL_OBJ & { performance?: Performance };\n  // Some browser and environments don't have a performance or timeOrigin, so we fallback to\n  // using Date.now() to compute the starting time.\n  if (!performance?.now || !performance.timeOrigin) {\n    return dateTimestampInSeconds;\n  }\n\n  const timeOrigin = performance.timeOrigin;\n\n  // performance.now() is a monotonic clock, which means it starts at 0 when the process begins. To get the current\n  // wall clock time (actual UNIX timestamp), we need to add the starting time origin and the current time elapsed.\n  //\n  // TODO: This does not account for the case where the monotonic clock that powers performance.now() drifts from the\n  // wall clock time, which causes the returned timestamp to be inaccurate. We should investigate how to detect and\n  // correct for this.\n  // See: https://github.com/getsentry/sentry-javascript/issues/2590\n  // See: https://github.com/mdn/content/issues/4713\n  // See: https://dev.to/noamr/when-a-millisecond-is-not-a-millisecond-3h6\n  return () => {\n    return (timeOrigin + performance.now()) / ONE_SECOND_IN_MS;\n  };\n}\n\nlet _cachedTimestampInSeconds: (() => number) | undefined;\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nexport function timestampInSeconds(): number {\n  // We store this in a closure so that we don't have to create a new function every time this is called.\n  const func = _cachedTimestampInSeconds ?? (_cachedTimestampInSeconds = createUnixTimestampInSecondsFunc());\n  return func();\n}\n\n/**\n * Cached result of getBrowserTimeOrigin.\n */\nlet cachedTimeOrigin: [number | undefined, string] | undefined;\n\n/**\n * Gets the time origin and the mode used to determine it.\n */\nfunction getBrowserTimeOrigin(): [number | undefined, string] {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n  if (!performance?.now) {\n    return [undefined, 'none'];\n  }\n\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin\n    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n    : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing?.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      return [performance.timeOrigin, 'timeOrigin'];\n    } else {\n      return [navigationStart, 'navigationStart'];\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  return [dateNow, 'dateNow'];\n}\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nexport function browserPerformanceTimeOrigin(): number | undefined {\n  if (!cachedTimeOrigin) {\n    cachedTimeOrigin = getBrowserTimeOrigin();\n  }\n\n  return cachedTimeOrigin[0];\n}\n","import { getGlobalSingleton } from './carrier';\nimport { Scope } from './scope';\n\n/** Get the default current scope. */\nexport function getDefaultCurrentScope(): Scope {\n  return getGlobalSingleton('defaultCurrentScope', () => new Scope());\n}\n\n/** Get the default isolation scope. */\nexport function getDefaultIsolationScope(): Scope {\n  return getGlobalSingleton('defaultIsolationScope', () => new Scope());\n}\n","import type { Event } from '../types-hoist/event';\nimport type { Exception } from '../types-hoist/exception';\nimport type { Mechanism } from '../types-hoist/mechanism';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport { addNonEnumerableProperty } from './object';\nimport { snipLine } from './string';\nimport { GLOBAL_OBJ } from './worldwide';\n\ninterface CryptoInternal {\n  randomUUID?(): string;\n}\n\n/** An interface for common properties on global */\ninterface CryptoGlobal {\n  msCrypto?: CryptoInternal;\n  crypto?: CryptoInternal;\n}\n\nfunction getCrypto(): CryptoInternal | undefined {\n  const gbl = GLOBAL_OBJ as typeof GLOBAL_OBJ & CryptoGlobal;\n  return gbl.crypto || gbl.msCrypto;\n}\n\nlet emptyUuid: string | undefined;\n\nfunction getRandomByte(): number {\n  return Math.random() * 16;\n}\n\n/**\n * UUID4 generator\n * @param crypto Object that provides the crypto API.\n * @returns string Generated UUID4.\n */\nexport function uuid4(crypto = getCrypto()): string {\n  try {\n    if (crypto?.randomUUID) {\n      return crypto.randomUUID().replace(/-/g, '');\n    }\n  } catch {\n    // some runtimes can crash invoking crypto\n    // https://github.com/getsentry/sentry-javascript/issues/8935\n  }\n\n  if (!emptyUuid) {\n    // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n    // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n    emptyUuid = ([1e7] as unknown as string) + 1e3 + 4e3 + 8e3 + 1e11;\n  }\n\n  return emptyUuid.replace(/[018]/g, c =>\n    // eslint-disable-next-line no-bitwise\n    ((c as unknown as number) ^ ((getRandomByte() & 15) >> ((c as unknown as number) / 4))).toString(16),\n  );\n}\n\nfunction getFirstException(event: Event): Exception | undefined {\n  return event.exception?.values?.[0];\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nexport function getEventDescription(event: Event): string {\n  const { message, event_id: eventId } = event;\n  if (message) {\n    return message;\n  }\n\n  const firstException = getFirstException(event);\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return `${firstException.type}: ${firstException.value}`;\n    }\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n  return eventId || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nexport function addExceptionTypeValue(event: Event, value?: string, type?: string): void {\n  const exception = (event.exception = event.exception || {});\n  const values = (exception.values = exception.values || []);\n  const firstException = (values[0] = values[0] || {});\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nexport function addExceptionMechanism(event: Event, newMechanism?: Partial<Mechanism>): void {\n  const firstException = getFirstException(event);\n  if (!firstException) {\n    return;\n  }\n\n  const defaultMechanism = { type: 'generic', handled: true };\n  const currentMechanism = firstException.mechanism;\n  firstException.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };\n\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = { ...currentMechanism?.data, ...newMechanism.data };\n    firstException.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP =\n  /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\ninterface SemVer {\n  major?: number;\n  minor?: number;\n  patch?: number;\n  prerelease?: string;\n  buildmetadata?: string;\n}\n\nfunction _parseInt(input: string | undefined): number {\n  return parseInt(input || '', 10);\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nexport function parseSemver(input: string): SemVer {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = _parseInt(match[1]);\n  const minor = _parseInt(match[2]);\n  const patch = _parseInt(match[3]);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nexport function addContextToFrame(lines: string[], frame: StackFrame, linesOfContext: number = 5): void {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n  if (frame.lineno === undefined) {\n    return;\n  }\n\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines - 1, frame.lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line: string) => snipLine(line, 0));\n\n  // We guard here to ensure this is not larger than the existing number of lines\n  const lineIndex = Math.min(maxLines - 1, sourceLine);\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  frame.context_line = snipLine(lines[lineIndex]!, frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line: string) => snipLine(line, 0));\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nexport function checkOrSetAlreadyCaught(exception: unknown): boolean {\n  if (isAlreadyCaptured(exception)) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    addNonEnumerableProperty(exception as { [key: string]: unknown }, '__sentry_captured__', true);\n  } catch {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}\n\nfunction isAlreadyCaptured(exception: unknown): boolean | void {\n  try {\n    return (exception as { __sentry_captured__?: boolean }).__sentry_captured__;\n  } catch {} // eslint-disable-line no-empty\n}\n","import { uuid4 } from './misc';\n\n/**\n * Generate a random, valid trace ID.\n */\nexport function generateTraceId(): string {\n  return uuid4();\n}\n\n/**\n * Generate a random, valid span ID.\n */\nexport function generateSpanId(): string {\n  return uuid4().substring(16);\n}\n","/**\n * Shallow merge two objects.\n * Does not mutate the passed in objects.\n * Undefined/empty values in the merge object will overwrite existing values.\n *\n * By default, this merges 2 levels deep.\n */\nexport function merge<T>(initialObj: T, mergeObj: T, levels = 2): T {\n  // If the merge value is not an object, or we have no merge levels left,\n  // we just set the value to the merge value\n  if (!mergeObj || typeof mergeObj !== 'object' || levels <= 0) {\n    return mergeObj;\n  }\n\n  // If the merge object is an empty object, and the initial object is not undefined, we return the initial object\n  if (initialObj && Object.keys(mergeObj).length === 0) {\n    return initialObj;\n  }\n\n  // Clone object\n  const output = { ...initialObj };\n\n  // Merge values into output, resursively\n  for (const key in mergeObj) {\n    if (Object.prototype.hasOwnProperty.call(mergeObj, key)) {\n      output[key] = merge(output[key], mergeObj[key], levels - 1);\n    }\n  }\n\n  return output;\n}\n","import { getAsyncContextStrategy } from './asyncContext';\nimport { getGlobalSingleton, getMainCarrier } from './carrier';\nimport type { Client } from './client';\nimport { Scope } from './scope';\nimport type { TraceContext } from './types-hoist/context';\nimport { generateSpanId } from './utils/propagationContext';\n\n/**\n * Get the currently active scope.\n */\nexport function getCurrentScope(): Scope {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  return acs.getCurrentScope();\n}\n\n/**\n * Get the currently active isolation scope.\n * The isolation scope is active for the current execution context.\n */\nexport function getIsolationScope(): Scope {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  return acs.getIsolationScope();\n}\n\n/**\n * Get the global scope.\n * This scope is applied to _all_ events.\n */\nexport function getGlobalScope(): Scope {\n  return getGlobalSingleton('globalScope', () => new Scope());\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n */\nexport function withScope<T>(callback: (scope: Scope) => T): T;\n/**\n * Set the given scope as the active scope in the callback.\n */\nexport function withScope<T>(scope: Scope | undefined, callback: (scope: Scope) => T): T;\n/**\n * Either creates a new active scope, or sets the given scope as active scope in the given callback.\n */\nexport function withScope<T>(\n  ...rest: [callback: (scope: Scope) => T] | [scope: Scope | undefined, callback: (scope: Scope) => T]\n): T {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [scope, callback] = rest;\n\n    if (!scope) {\n      return acs.withScope(callback);\n    }\n\n    return acs.withSetScope(scope, callback);\n  }\n\n  return acs.withScope(rest[0]);\n}\n\n/**\n * Attempts to fork the current isolation scope and the current scope based on the current async context strategy. If no\n * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the\n * case, for example, in the browser).\n *\n * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.\n *\n * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in \"normal\"\n * applications directly because it comes with pitfalls. Use at your own risk!\n */\nexport function withIsolationScope<T>(callback: (isolationScope: Scope) => T): T;\n/**\n * Set the provided isolation scope as active in the given callback. If no\n * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the\n * case, for example, in the browser).\n *\n * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.\n *\n * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in \"normal\"\n * applications directly because it comes with pitfalls. Use at your own risk!\n *\n * If you pass in `undefined` as a scope, it will fork a new isolation scope, the same as if no scope is passed.\n */\nexport function withIsolationScope<T>(isolationScope: Scope | undefined, callback: (isolationScope: Scope) => T): T;\n/**\n * Either creates a new active isolation scope, or sets the given isolation scope as active scope in the given callback.\n */\nexport function withIsolationScope<T>(\n  ...rest:\n    | [callback: (isolationScope: Scope) => T]\n    | [isolationScope: Scope | undefined, callback: (isolationScope: Scope) => T]\n): T {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [isolationScope, callback] = rest;\n\n    if (!isolationScope) {\n      return acs.withIsolationScope(callback);\n    }\n\n    return acs.withSetIsolationScope(isolationScope, callback);\n  }\n\n  return acs.withIsolationScope(rest[0]);\n}\n\n/**\n * Get the currently active client.\n */\nexport function getClient<C extends Client>(): C | undefined {\n  return getCurrentScope().getClient<C>();\n}\n\n/**\n * Get a trace context for the given scope.\n */\nexport function getTraceContextFromScope(scope: Scope): TraceContext {\n  const propagationContext = scope.getPropagationContext();\n\n  const { traceId, parentSpanId, propagationSpanId } = propagationContext;\n\n  const traceContext: TraceContext = {\n    trace_id: traceId,\n    span_id: propagationSpanId || generateSpanId(),\n  };\n\n  if (parentSpanId) {\n    traceContext.parent_span_id = parentSpanId;\n  }\n\n  return traceContext;\n}\n","import type { Client } from '../client';\nimport { getDefaultCurrentScope, getDefaultIsolationScope } from '../defaultScopes';\nimport { Scope } from '../scope';\nimport { isThenable } from '../utils/is';\nimport { getMainCarrier, getSentryCarrier } from './../carrier';\nimport type { AsyncContextStrategy } from './types';\n\ninterface Layer {\n  client?: Client;\n  scope: Scope;\n}\n\n/**\n * This is an object that holds a stack of scopes.\n */\nexport class AsyncContextStack {\n  private readonly _stack: [Layer, ...Layer[]];\n  private _isolationScope: Scope;\n\n  public constructor(scope?: Scope, isolationScope?: Scope) {\n    let assignedScope;\n    if (!scope) {\n      assignedScope = new Scope();\n    } else {\n      assignedScope = scope;\n    }\n\n    let assignedIsolationScope;\n    if (!isolationScope) {\n      assignedIsolationScope = new Scope();\n    } else {\n      assignedIsolationScope = isolationScope;\n    }\n\n    // scope stack for domains or the process\n    this._stack = [{ scope: assignedScope }];\n    this._isolationScope = assignedIsolationScope;\n  }\n\n  /**\n   * Fork a scope for the stack.\n   */\n  public withScope<T>(callback: (scope: Scope) => T): T {\n    const scope = this._pushScope();\n\n    let maybePromiseResult: T;\n    try {\n      maybePromiseResult = callback(scope);\n    } catch (e) {\n      this._popScope();\n      throw e;\n    }\n\n    if (isThenable(maybePromiseResult)) {\n      // @ts-expect-error - isThenable returns the wrong type\n      return maybePromiseResult.then(\n        res => {\n          this._popScope();\n          return res;\n        },\n        e => {\n          this._popScope();\n          throw e;\n        },\n      );\n    }\n\n    this._popScope();\n    return maybePromiseResult;\n  }\n\n  /**\n   * Get the client of the stack.\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this.getStackTop().client as C;\n  }\n\n  /**\n   * Returns the scope of the top stack.\n   */\n  public getScope(): Scope {\n    return this.getStackTop().scope;\n  }\n\n  /**\n   * Get the isolation scope for the stack.\n   */\n  public getIsolationScope(): Scope {\n    return this._isolationScope;\n  }\n\n  /**\n   * Returns the topmost scope layer in the order domain > local > process.\n   */\n  public getStackTop(): Layer {\n    return this._stack[this._stack.length - 1] as Layer;\n  }\n\n  /**\n   * Push a scope to the stack.\n   */\n  private _pushScope(): Scope {\n    // We want to clone the content of prev scope\n    const scope = this.getScope().clone();\n    this._stack.push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * Pop a scope from the stack.\n   */\n  private _popScope(): boolean {\n    if (this._stack.length <= 1) return false;\n    return !!this._stack.pop();\n  }\n}\n\n/**\n * Get the global async context stack.\n * This will be removed during the v8 cycle and is only here to make migration easier.\n */\nfunction getAsyncContextStack(): AsyncContextStack {\n  const registry = getMainCarrier();\n  const sentry = getSentryCarrier(registry);\n\n  return (sentry.stack = sentry.stack || new AsyncContextStack(getDefaultCurrentScope(), getDefaultIsolationScope()));\n}\n\nfunction withScope<T>(callback: (scope: Scope) => T): T {\n  return getAsyncContextStack().withScope(callback);\n}\n\nfunction withSetScope<T>(scope: Scope, callback: (scope: Scope) => T): T {\n  const stack = getAsyncContextStack();\n  return stack.withScope(() => {\n    stack.getStackTop().scope = scope;\n    return callback(scope);\n  });\n}\n\nfunction withIsolationScope<T>(callback: (isolationScope: Scope) => T): T {\n  return getAsyncContextStack().withScope(() => {\n    return callback(getAsyncContextStack().getIsolationScope());\n  });\n}\n\n/**\n * Get the stack-based async context strategy.\n */\nexport function getStackAsyncContextStrategy(): AsyncContextStrategy {\n  return {\n    withIsolationScope,\n    withScope,\n    withSetScope,\n    withSetIsolationScope: <T>(_isolationScope: Scope, callback: (isolationScope: Scope) => T) => {\n      return withIsolationScope(callback);\n    },\n    getCurrentScope: () => getAsyncContextStack().getScope(),\n    getIsolationScope: () => getAsyncContextStack().getIsolationScope(),\n  };\n}\n","import type { Carrier } from './../carrier';\nimport { getMainCarrier, getSentryCarrier } from './../carrier';\nimport { getStackAsyncContextStrategy } from './stackStrategy';\nimport type { AsyncContextStrategy } from './types';\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */\nexport function setAsyncContextStrategy(strategy: AsyncContextStrategy | undefined): void {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n  const sentry = getSentryCarrier(registry);\n  sentry.acs = strategy;\n}\n\n/**\n * Get the current async context strategy.\n * If none has been setup, the default will be used.\n */\nexport function getAsyncContextStrategy(carrier: Carrier): AsyncContextStrategy {\n  const sentry = getSentryCarrier(carrier);\n\n  if (sentry.acs) {\n    return sentry.acs;\n  }\n\n  // Otherwise, use the default one (stack)\n  return getStackAsyncContextStrategy();\n}\n","import { isRegExp, isString, isVueViewModel } from './is';\n\nexport { escapeStringForRegex } from '../vendor/escapeStringForRegex';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\nexport function safeJoin(input: unknown[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n      // console warnings. This happens when a Vue template is rendered with\n      // an undeclared variable, which we try to stringify, ultimately causing\n      // Vue to issue another warning which repeats indefinitely.\n      // see: https://github.com/getsentry/sentry-javascript/pull/8981\n      if (isVueViewModel(value)) {\n        output.push('[VueViewModel]');\n      } else {\n        output.push(String(value));\n      }\n    } catch {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */\nexport function isMatchingPattern(\n  value: string,\n  pattern: RegExp | string,\n  requireExactStringMatch: boolean = false,\n): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (isString(pattern)) {\n    return requireExactStringMatch ? value === pattern : value.includes(pattern);\n  }\n\n  return false;\n}\n\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */\nexport function stringMatchesSomePattern(\n  testString: string,\n  patterns: Array<string | RegExp> = [],\n  requireExactStringMatch: boolean = false,\n): boolean {\n  return patterns.some(pattern => isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\n","import type { SerializedSession, Session, SessionContext, SessionStatus } from './types-hoist/session';\nimport { uuid4 } from './utils/misc';\nimport { timestampInSeconds } from './utils/time';\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nexport function makeSession(context?: Omit<SessionContext, 'started' | 'status'>): Session {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = timestampInSeconds();\n\n  const session: Session = {\n    sid: uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session),\n  };\n\n  if (context) {\n    updateSession(session, context);\n  }\n\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see Client.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nexport function updateSession(session: Session, context: SessionContext = {}): void {\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n\n  session.timestamp = context.timestamp || timestampInSeconds();\n\n  if (context.abnormal_mechanism) {\n    session.abnormal_mechanism = context.abnormal_mechanism;\n  }\n\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nexport function closeSession(session: Session, status?: Exclude<SessionStatus, 'ok'>): void {\n  let context = {};\n  if (status) {\n    context = { status };\n  } else if (session.status === 'ok') {\n    context = { status: 'exited' };\n  }\n\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session: Session): SerializedSession {\n  return {\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    abnormal_mechanism: session.abnormal_mechanism,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent,\n    },\n  };\n}\n","/* eslint-disable max-lines */\nimport type { Client } from './client';\nimport { DEBUG_BUILD } from './debug-build';\nimport { updateSession } from './session';\nimport type { Attachment } from './types-hoist/attachment';\nimport type { Breadcrumb } from './types-hoist/breadcrumb';\nimport type { Context, Contexts } from './types-hoist/context';\nimport type { DynamicSamplingContext } from './types-hoist/envelope';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { EventProcessor } from './types-hoist/eventprocessor';\nimport type { Extra, Extras } from './types-hoist/extra';\nimport type { Primitive } from './types-hoist/misc';\nimport type { RequestEventData } from './types-hoist/request';\nimport type { Session } from './types-hoist/session';\nimport type { SeverityLevel } from './types-hoist/severity';\nimport type { Span } from './types-hoist/span';\nimport type { PropagationContext } from './types-hoist/tracing';\nimport type { User } from './types-hoist/user';\nimport { debug } from './utils/debug-logger';\nimport { isPlainObject } from './utils/is';\nimport { merge } from './utils/merge';\nimport { uuid4 } from './utils/misc';\nimport { generateTraceId } from './utils/propagationContext';\nimport { _getSpanForScope, _setSpanForScope } from './utils/spanOnScope';\nimport { truncate } from './utils/string';\nimport { dateTimestampInSeconds } from './utils/time';\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * A context to be used for capturing an event.\n * This can either be a Scope, or a partial ScopeContext,\n * or a callback that receives the current scope and returns a new scope to use.\n */\nexport type CaptureContext = Scope | Partial<ScopeContext> | ((scope: Scope) => Scope);\n\n/**\n * Data that can be converted to a Scope.\n */\nexport interface ScopeContext {\n  user: User;\n  level: SeverityLevel;\n  extra: Extras;\n  contexts: Contexts;\n  tags: { [key: string]: Primitive };\n  fingerprint: string[];\n  propagationContext: PropagationContext;\n}\n\nexport interface SdkProcessingMetadata {\n  [key: string]: unknown;\n  requestSession?: {\n    status: 'ok' | 'errored' | 'crashed';\n  };\n  normalizedRequest?: RequestEventData;\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>;\n  capturedSpanScope?: Scope;\n  capturedSpanIsolationScope?: Scope;\n  spanCountBeforeProcessing?: number;\n  ipAddress?: string;\n}\n\n/**\n * Normalized data of the Scope, ready to be used.\n */\nexport interface ScopeData {\n  eventProcessors: EventProcessor[];\n  breadcrumbs: Breadcrumb[];\n  user: User;\n  tags: { [key: string]: Primitive };\n  extra: Extras;\n  contexts: Contexts;\n  attachments: Attachment[];\n  propagationContext: PropagationContext;\n  sdkProcessingMetadata: SdkProcessingMetadata;\n  fingerprint: string[];\n  level?: SeverityLevel;\n  transactionName?: string;\n  span?: Span;\n}\n\n/**\n * Holds additional event information.\n */\nexport class Scope {\n  /** Flag if notifying is happening. */\n  protected _notifyingListeners: boolean;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void>;\n\n  /** Callback list that will be called during event processing. */\n  protected _eventProcessors: EventProcessor[];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[];\n\n  /** User */\n  protected _user: User;\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive };\n\n  /** Extra */\n  protected _extra: Extras;\n\n  /** Contexts */\n  protected _contexts: Contexts;\n\n  /** Attachments */\n  protected _attachments: Attachment[];\n\n  /** Propagation Context for distributed tracing */\n  protected _propagationContext: PropagationContext;\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n  protected _sdkProcessingMetadata: SdkProcessingMetadata;\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  protected _level?: SeverityLevel;\n\n  /**\n   * Transaction Name\n   *\n   * IMPORTANT: The transaction name on the scope has nothing to do with root spans/transaction objects.\n   * It's purpose is to assign a transaction to the scope that's added to non-transaction events.\n   */\n  protected _transactionName?: string;\n\n  /** Session */\n  protected _session?: Session;\n\n  /** The client on this scope */\n  protected _client?: Client;\n\n  /** Contains the last event id of a captured event.  */\n  protected _lastEventId?: string;\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  public constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n    this._propagationContext = {\n      traceId: generateTraceId(),\n      sampleRand: Math.random(),\n    };\n  }\n\n  /**\n   * Clone all data from this scope into a new scope.\n   */\n  public clone(): Scope {\n    const newScope = new Scope();\n    newScope._breadcrumbs = [...this._breadcrumbs];\n    newScope._tags = { ...this._tags };\n    newScope._extra = { ...this._extra };\n    newScope._contexts = { ...this._contexts };\n    if (this._contexts.flags) {\n      // We need to copy the `values` array so insertions on a cloned scope\n      // won't affect the original array.\n      newScope._contexts.flags = {\n        values: [...this._contexts.flags.values],\n      };\n    }\n\n    newScope._user = this._user;\n    newScope._level = this._level;\n    newScope._session = this._session;\n    newScope._transactionName = this._transactionName;\n    newScope._fingerprint = this._fingerprint;\n    newScope._eventProcessors = [...this._eventProcessors];\n    newScope._attachments = [...this._attachments];\n    newScope._sdkProcessingMetadata = { ...this._sdkProcessingMetadata };\n    newScope._propagationContext = { ...this._propagationContext };\n    newScope._client = this._client;\n    newScope._lastEventId = this._lastEventId;\n\n    _setSpanForScope(newScope, _getSpanForScope(this));\n\n    return newScope;\n  }\n\n  /**\n   * Update the client assigned to this scope.\n   * Note that not every scope will have a client assigned - isolation scopes & the global scope will generally not have a client,\n   * as well as manually created scopes.\n   */\n  public setClient(client: Client | undefined): void {\n    this._client = client;\n  }\n\n  /**\n   * Set the ID of the last captured error event.\n   * This is generally only captured on the isolation scope.\n   */\n  public setLastEventId(lastEventId: string | undefined): void {\n    this._lastEventId = lastEventId;\n  }\n\n  /**\n   * Get the client assigned to this scope.\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this._client as C | undefined;\n  }\n\n  /**\n   * Get the ID of the last captured error event.\n   * This is generally only available on the isolation scope.\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * Add an event processor that will be called before an event is sent.\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * Set the user for this scope.\n   * Set to `null` to unset the user.\n   */\n  public setUser(user: User | null): this {\n    // If null is passed we want to unset everything, but still define keys,\n    // so that later down in the pipeline any existing values are cleared.\n    this._user = user || {\n      email: undefined,\n      id: undefined,\n      ip_address: undefined,\n      username: undefined,\n    };\n\n    if (this._session) {\n      updateSession(this._session, { user });\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Get the user from this scope.\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * Set an object that will be merged into existing tags on the scope,\n   * and will be sent as tags data with the event.\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set a single tag that will be sent as tags data with the event.\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set an object that will be merged into existing extra on the scope,\n   * and will be sent as extra data with the event.\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set a single key:value extra entry that will be sent as extra data with the event.\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the fingerprint on the scope to send with the events.\n   * @param {string[]} fingerprint Fingerprint to group events in Sentry.\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the level on the scope for future events.\n   */\n  public setLevel(level: SeverityLevel): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the transaction name on the scope so that the name of e.g. taken server route or\n   * the page location is attached to future events.\n   *\n   * IMPORTANT: Calling this function does NOT change the name of the currently active\n   * root span. If you want to change the name of the active root span, use\n   * `Sentry.updateSpanName(rootSpan, 'new name')` instead.\n   *\n   * By default, the SDK updates the scope's transaction name automatically on sensible\n   * occasions, such as a page navigation or when handling a new request on the server.\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets context data with the given name.\n   * Data passed as context will be normalized. You can also pass `null` to unset the context.\n   * Note that context data will not be merged - calling `setContext` will overwrite an existing context with the same key.\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set the session for the scope.\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Get the session from the scope.\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * Updates the scope with provided data. Can work in three variations:\n   * - plain object containing updatable attributes\n   * - Scope instance that'll extract the attributes from\n   * - callback function that'll receive the current scope as an argument and allow for modifications\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    const scopeToMerge = typeof captureContext === 'function' ? captureContext(this) : captureContext;\n\n    const scopeInstance =\n      scopeToMerge instanceof Scope\n        ? scopeToMerge.getScopeData()\n        : isPlainObject(scopeToMerge)\n          ? (captureContext as ScopeContext)\n          : undefined;\n\n    const { tags, extra, user, contexts, level, fingerprint = [], propagationContext } = scopeInstance || {};\n\n    this._tags = { ...this._tags, ...tags };\n    this._extra = { ...this._extra, ...extra };\n    this._contexts = { ...this._contexts, ...contexts };\n\n    if (user && Object.keys(user).length) {\n      this._user = user;\n    }\n\n    if (level) {\n      this._level = level;\n    }\n\n    if (fingerprint.length) {\n      this._fingerprint = fingerprint;\n    }\n\n    if (propagationContext) {\n      this._propagationContext = propagationContext;\n    }\n\n    return this;\n  }\n\n  /**\n   * Clears the current scope and resets its properties.\n   * Note: The client will not be cleared.\n   */\n  public clear(): this {\n    // client is not cleared here on purpose!\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._session = undefined;\n    _setSpanForScope(this, undefined);\n    this._attachments = [];\n    this.setPropagationContext({ traceId: generateTraceId(), sampleRand: Math.random() });\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Adds a breadcrumb to the scope.\n   * By default, the last 100 breadcrumbs are kept.\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb: Breadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n      // Breadcrumb messages can theoretically be infinitely large and they're held in memory so we truncate them not to leak (too much) memory\n      message: breadcrumb.message ? truncate(breadcrumb.message, 2048) : breadcrumb.message,\n    };\n\n    this._breadcrumbs.push(mergedBreadcrumb);\n    if (this._breadcrumbs.length > maxCrumbs) {\n      this._breadcrumbs = this._breadcrumbs.slice(-maxCrumbs);\n      this._client?.recordDroppedEvent('buffer_overflow', 'log_item');\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * Get the last breadcrumb of the scope.\n   */\n  public getLastBreadcrumb(): Breadcrumb | undefined {\n    return this._breadcrumbs[this._breadcrumbs.length - 1];\n  }\n\n  /**\n   * Clear all breadcrumbs from the scope.\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Add an attachment to the scope.\n   */\n  public addAttachment(attachment: Attachment): this {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * Clear all attachments from the scope.\n   */\n  public clearAttachments(): this {\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * Get the data of this scope, which should be applied to an event during processing.\n   */\n  public getScopeData(): ScopeData {\n    return {\n      breadcrumbs: this._breadcrumbs,\n      attachments: this._attachments,\n      contexts: this._contexts,\n      tags: this._tags,\n      extra: this._extra,\n      user: this._user,\n      level: this._level,\n      fingerprint: this._fingerprint || [],\n      eventProcessors: this._eventProcessors,\n      propagationContext: this._propagationContext,\n      sdkProcessingMetadata: this._sdkProcessingMetadata,\n      transactionName: this._transactionName,\n      span: _getSpanForScope(this),\n    };\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry.\n   */\n  public setSDKProcessingMetadata(newData: SdkProcessingMetadata): this {\n    this._sdkProcessingMetadata = merge(this._sdkProcessingMetadata, newData, 2);\n    return this;\n  }\n\n  /**\n   * Add propagation context to the scope, used for distributed tracing\n   */\n  public setPropagationContext(context: PropagationContext): this {\n    this._propagationContext = context;\n    return this;\n  }\n\n  /**\n   * Get propagation context from the scope, used for distributed tracing\n   */\n  public getPropagationContext(): PropagationContext {\n    return this._propagationContext;\n  }\n\n  /**\n   * Capture an exception for this scope.\n   *\n   * @returns {string} The id of the captured Sentry event.\n   */\n  public captureException(exception: unknown, hint?: EventHint): string {\n    const eventId = hint?.event_id || uuid4();\n\n    if (!this._client) {\n      DEBUG_BUILD && debug.warn('No client configured on scope - will not capture exception!');\n      return eventId;\n    }\n\n    const syntheticException = new Error('Sentry syntheticException');\n\n    this._client.captureException(\n      exception,\n      {\n        originalException: exception,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Capture a message for this scope.\n   *\n   * @returns {string} The id of the captured message.\n   */\n  public captureMessage(message: string, level?: SeverityLevel, hint?: EventHint): string {\n    const eventId = hint?.event_id || uuid4();\n\n    if (!this._client) {\n      DEBUG_BUILD && debug.warn('No client configured on scope - will not capture message!');\n      return eventId;\n    }\n\n    const syntheticException = new Error(message);\n\n    this._client.captureMessage(\n      message,\n      level,\n      {\n        originalException: message,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Capture a Sentry event for this scope.\n   *\n   * @returns {string} The id of the captured event.\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint?.event_id || uuid4();\n\n    if (!this._client) {\n      DEBUG_BUILD && debug.warn('No client configured on scope - will not capture event!');\n      return eventId;\n    }\n\n    this._client.captureEvent(event, { ...hint, event_id: eventId }, this);\n\n    return eventId;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { WrappedFunction } from '../types-hoist/wrappedfunction';\nimport { htmlTreeAsString } from './browser';\nimport { debug } from './debug-logger';\nimport { isElement, isError, isEvent, isInstanceOf, isPrimitive } from './is';\nimport { truncate } from './string';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * If the method on the passed object is not a function, the wrapper will not be applied.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacementFactory: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  // explicitly casting to unknown because we don't know the type of the method initially at all\n  const original = source[name] as unknown;\n\n  if (typeof original !== 'function') {\n    return;\n  }\n\n  const wrapped = replacementFactory(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    markFunctionWrapped(wrapped, original);\n  }\n\n  try {\n    source[name] = wrapped;\n  } catch {\n    DEBUG_BUILD && debug.log(`Failed to replace method \"${name}\" in object`, source);\n  }\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nexport function addNonEnumerableProperty(obj: object, name: string, value: unknown): void {\n  try {\n    Object.defineProperty(obj, name, {\n      // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n      value: value,\n      writable: true,\n      configurable: true,\n    });\n  } catch {\n    DEBUG_BUILD && debug.log(`Failed to add non-enumerable property \"${name}\" to object`, obj);\n  }\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nexport function markFunctionWrapped(wrapped: WrappedFunction, original: WrappedFunction): void {\n  try {\n    const proto = original.prototype || {};\n    wrapped.prototype = original.prototype = proto;\n    addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n  } catch {} // eslint-disable-line no-empty\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function getOriginalFunction<T extends Function>(func: WrappedFunction<T>): T | undefined {\n  return func.__sentry_original__;\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argument itself, when value is neither an Event nor\n *  an Error.\n */\nexport function convertToPlainObject<V>(value: V):\n  | {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    }\n  | {\n      [ownProps: string]: unknown;\n      message: string;\n      name: string;\n      stack?: string;\n    }\n  | V {\n  if (isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value),\n    };\n  } else if (isEvent(value)) {\n    const newObj: {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    } = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value),\n    };\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target: unknown): string {\n  try {\n    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj: unknown): { [key: string]: unknown } {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps: { [key: string]: unknown } = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = (obj as Record<string, unknown>)[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nexport function extractExceptionKeysForMessage(exception: Record<string, unknown>, maxLength: number = 40): string {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n\n  const firstKey = keys[0];\n\n  if (!firstKey) {\n    return '[object has no keys]';\n  }\n\n  if (firstKey.length >= maxLength) {\n    return truncate(firstKey, maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n *\n * @deprecated This function is no longer used by the SDK and will be removed in a future major version.\n */\nexport function dropUndefinedKeys<T>(inputValue: T): T {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map<unknown, unknown>();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\n\nfunction _dropUndefinedKeys<T>(inputValue: T, memoizationMap: Map<unknown, unknown>): T {\n  // Early return for primitive values\n  if (inputValue === null || typeof inputValue !== 'object') {\n    return inputValue;\n  }\n\n  // Check memo map first for all object types\n  const memoVal = memoizationMap.get(inputValue);\n  if (memoVal !== undefined) {\n    return memoVal as T;\n  }\n\n  // handle arrays\n  if (Array.isArray(inputValue)) {\n    const returnValue: unknown[] = [];\n    // Store mapping to handle circular references\n    memoizationMap.set(inputValue, returnValue);\n\n    inputValue.forEach(value => {\n      returnValue.push(_dropUndefinedKeys(value, memoizationMap));\n    });\n\n    return returnValue as unknown as T;\n  }\n\n  if (isPojo(inputValue)) {\n    const returnValue: { [key: string]: unknown } = {};\n    // Store mapping to handle circular references\n    memoizationMap.set(inputValue, returnValue);\n\n    const keys = Object.keys(inputValue);\n\n    keys.forEach(key => {\n      const val = inputValue[key];\n      if (val !== undefined) {\n        returnValue[key] = _dropUndefinedKeys(val, memoizationMap);\n      }\n    });\n\n    return returnValue as T;\n  }\n\n  // For other object types, return as is\n  return inputValue;\n}\n\nfunction isPojo(input: unknown): input is Record<string, unknown> {\n  // Plain objects have Object as constructor or no constructor\n  const constructor = (input as object).constructor;\n  return constructor === Object || constructor === undefined;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nexport function objectify(wat: unknown): typeof Object {\n  let objectified;\n  switch (true) {\n    // this will catch both undefined and null\n    case wat == undefined:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat as any).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n","import type { PolymorphicRequest } from '../types-hoist/polymorphics';\nimport type { RequestEventData } from '../types-hoist/request';\nimport type { WebFetchHeaders, WebFetchRequest } from '../types-hoist/webfetchapi';\n\n/**\n * Transforms a `Headers` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into a simple key-value dict.\n * The header keys will be lower case: e.g. A \"Content-Type\" header will be stored as \"content-type\".\n */\nexport function winterCGHeadersToDict(winterCGHeaders: WebFetchHeaders): Record<string, string> {\n  const headers: Record<string, string> = {};\n  try {\n    winterCGHeaders.forEach((value, key) => {\n      if (typeof value === 'string') {\n        // We check that value is a string even though it might be redundant to make sure prototype pollution is not possible.\n        headers[key] = value;\n      }\n    });\n  } catch {\n    // just return the empty headers\n  }\n\n  return headers;\n}\n\n/**\n * Convert common request headers to a simple dictionary.\n */\nexport function headersToDict(reqHeaders: Record<string, string | string[] | undefined>): Record<string, string> {\n  const headers: Record<string, string> = Object.create(null);\n\n  try {\n    Object.entries(reqHeaders).forEach(([key, value]) => {\n      if (typeof value === 'string') {\n        headers[key] = value;\n      }\n    });\n  } catch {\n    // just return the empty headers\n  }\n\n  return headers;\n}\n\n/**\n * Converts a `Request` object that implements the `Web Fetch API` (https://developer.mozilla.org/en-US/docs/Web/API/Headers) into the format that the `RequestData` integration understands.\n */\nexport function winterCGRequestToRequestData(req: WebFetchRequest): RequestEventData {\n  const headers = winterCGHeadersToDict(req.headers);\n\n  return {\n    method: req.method,\n    url: req.url,\n    query_string: extractQueryParamsFromUrl(req.url),\n    headers,\n    // TODO: Can we extract body data from the request?\n  };\n}\n\n/**\n * Convert a HTTP request object to RequestEventData to be passed as normalizedRequest.\n * Instead of allowing `PolymorphicRequest` to be passed,\n * we want to be more specific and generally require a http.IncomingMessage-like object.\n */\nexport function httpRequestToRequestData(request: {\n  method?: string;\n  url?: string;\n  headers?: {\n    [key: string]: string | string[] | undefined;\n  };\n  protocol?: string;\n  socket?: {\n    encrypted?: boolean;\n    remoteAddress?: string;\n  };\n}): RequestEventData {\n  const headers = request.headers || {};\n\n  // Check for x-forwarded-host first, then fall back to host header\n  const forwardedHost = typeof headers['x-forwarded-host'] === 'string' ? headers['x-forwarded-host'] : undefined;\n  const host = forwardedHost || (typeof headers.host === 'string' ? headers.host : undefined);\n\n  // Check for x-forwarded-proto first, then fall back to existing protocol detection\n  const forwardedProto = typeof headers['x-forwarded-proto'] === 'string' ? headers['x-forwarded-proto'] : undefined;\n  const protocol = forwardedProto || request.protocol || (request.socket?.encrypted ? 'https' : 'http');\n\n  const url = request.url || '';\n\n  const absoluteUrl = getAbsoluteUrl({\n    url,\n    host,\n    protocol,\n  });\n\n  // This is non-standard, but may be sometimes set\n  // It may be overwritten later by our own body handling\n  const data = (request as PolymorphicRequest).body || undefined;\n\n  // This is non-standard, but may be set on e.g. Next.js or Express requests\n  const cookies = (request as PolymorphicRequest).cookies;\n\n  return {\n    url: absoluteUrl,\n    method: request.method,\n    query_string: extractQueryParamsFromUrl(url),\n    headers: headersToDict(headers),\n    cookies,\n    data,\n  };\n}\n\nfunction getAbsoluteUrl({\n  url,\n  protocol,\n  host,\n}: {\n  url?: string;\n  protocol: string;\n  host?: string;\n}): string | undefined {\n  if (url?.startsWith('http')) {\n    return url;\n  }\n\n  if (url && host) {\n    return `${protocol}://${host}${url}`;\n  }\n\n  return undefined;\n}\n\n// \"-user\" because otherwise it would match \"user-agent\"\nconst SENSITIVE_HEADER_SNIPPETS = ['auth', 'token', 'secret', 'cookie', '-user', 'password', 'key'];\n\n/**\n * Converts incoming HTTP request headers to OpenTelemetry span attributes following semantic conventions.\n * Header names are converted to the format: http.request.header.<key>\n * where <key> is the header name in lowercase with dashes converted to underscores.\n *\n * @see https://opentelemetry.io/docs/specs/semconv/registry/attributes/http/#http-request-header\n */\nexport function httpHeadersToSpanAttributes(\n  headers: Record<string, string | string[] | undefined>,\n  sendDefaultPii: boolean = false,\n): Record<string, string> {\n  const spanAttributes: Record<string, string> = {};\n\n  try {\n    Object.entries(headers).forEach(([key, value]) => {\n      if (value !== undefined) {\n        const lowerCasedKey = key.toLowerCase();\n\n        if (!sendDefaultPii && SENSITIVE_HEADER_SNIPPETS.some(snippet => lowerCasedKey.includes(snippet))) {\n          return;\n        }\n\n        const normalizedKey = `http.request.header.${lowerCasedKey.replace(/-/g, '_')}`;\n\n        if (Array.isArray(value)) {\n          spanAttributes[normalizedKey] = value.map(v => (v !== null && v !== undefined ? String(v) : v)).join(';');\n        } else if (typeof value === 'string') {\n          spanAttributes[normalizedKey] = value;\n        }\n      }\n    });\n  } catch {\n    // Return empty object if there's an error\n  }\n\n  return spanAttributes;\n}\n\n/** Extract the query params from an URL. */\nexport function extractQueryParamsFromUrl(url: string): string | undefined {\n  // url is path and query string\n  if (!url) {\n    return;\n  }\n\n  try {\n    // The `URL` constructor can't handle internal URLs of the form `/some/path/here`, so stick a dummy protocol and\n    // hostname as the base. Since the point here is just to grab the query string, it doesn't matter what we use.\n    const queryParams = new URL(url, 'http://s.io').search.slice(1);\n    return queryParams.length ? queryParams : undefined;\n  } catch {\n    return undefined;\n  }\n}\n","export const DEFAULT_ENVIRONMENT = 'production';\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isThenable } from './is';\n\n/** SyncPromise internal states */\nconst STATE_PENDING = 0;\nconst STATE_RESOLVED = 1;\nconst STATE_REJECTED = 2;\n\ntype State = typeof STATE_PENDING | typeof STATE_RESOLVED | typeof STATE_REJECTED;\n\n// Overloads so we can call resolvedSyncPromise without arguments and generic argument\nexport function resolvedSyncPromise(): PromiseLike<void>;\nexport function resolvedSyncPromise<T>(value: T | PromiseLike<T>): PromiseLike<T>;\n\n/**\n * Creates a resolved sync promise.\n *\n * @param value the value to resolve the promise with\n * @returns the resolved sync promise\n */\nexport function resolvedSyncPromise<T>(value?: T | PromiseLike<T>): PromiseLike<T> {\n  return new SyncPromise(resolve => {\n    resolve(value);\n  });\n}\n\n/**\n * Creates a rejected sync promise.\n *\n * @param value the value to reject the promise with\n * @returns the rejected sync promise\n */\nexport function rejectedSyncPromise<T = never>(reason?: any): PromiseLike<T> {\n  return new SyncPromise((_, reject) => {\n    reject(reason);\n  });\n}\n\ntype Executor<T> = (resolve: (value?: T | PromiseLike<T> | null) => void, reject: (reason?: any) => void) => void;\n\n/**\n * Thenable class that behaves like a Promise and follows it's interface\n * but is not async internally\n */\nexport class SyncPromise<T> implements PromiseLike<T> {\n  private _state: State;\n  private _handlers: Array<[boolean, (value: T) => void, (reason: any) => any]>;\n  private _value: any;\n\n  public constructor(executor: Executor<T>) {\n    this._state = STATE_PENDING;\n    this._handlers = [];\n\n    this._runExecutor(executor);\n  }\n\n  /** @inheritdoc */\n  public then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null,\n  ): PromiseLike<TResult1 | TResult2> {\n    return new SyncPromise((resolve, reject) => {\n      this._handlers.push([\n        false,\n        result => {\n          if (!onfulfilled) {\n            // TODO: ¯\\_(ツ)_/¯\n            // TODO: FIXME\n            resolve(result as any);\n          } else {\n            try {\n              resolve(onfulfilled(result));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n        reason => {\n          if (!onrejected) {\n            reject(reason);\n          } else {\n            try {\n              resolve(onrejected(reason));\n            } catch (e) {\n              reject(e);\n            }\n          }\n        },\n      ]);\n      this._executeHandlers();\n    });\n  }\n\n  /** @inheritdoc */\n  public catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null,\n  ): PromiseLike<T | TResult> {\n    return this.then(val => val, onrejected);\n  }\n\n  /** @inheritdoc */\n  public finally<TResult>(onfinally?: (() => void) | null): PromiseLike<TResult> {\n    return new SyncPromise<TResult>((resolve, reject) => {\n      let val: TResult | any;\n      let isRejected: boolean;\n\n      return this.then(\n        value => {\n          isRejected = false;\n          val = value;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n        reason => {\n          isRejected = true;\n          val = reason;\n          if (onfinally) {\n            onfinally();\n          }\n        },\n      ).then(() => {\n        if (isRejected) {\n          reject(val);\n          return;\n        }\n\n        resolve(val as unknown as any);\n      });\n    });\n  }\n\n  /** Excute the resolve/reject handlers. */\n  private _executeHandlers(): void {\n    if (this._state === STATE_PENDING) {\n      return;\n    }\n\n    const cachedHandlers = this._handlers.slice();\n    this._handlers = [];\n\n    cachedHandlers.forEach(handler => {\n      if (handler[0]) {\n        return;\n      }\n\n      if (this._state === STATE_RESOLVED) {\n        handler[1](this._value as unknown as any);\n      }\n\n      if (this._state === STATE_REJECTED) {\n        handler[2](this._value);\n      }\n\n      handler[0] = true;\n    });\n  }\n\n  /** Run the executor for the SyncPromise. */\n  private _runExecutor(executor: Executor<T>): void {\n    const setResult = (state: State, value?: T | PromiseLike<T> | any): void => {\n      if (this._state !== STATE_PENDING) {\n        return;\n      }\n\n      if (isThenable(value)) {\n        void (value as PromiseLike<T>).then(resolve, reject);\n        return;\n      }\n\n      this._state = state;\n      this._value = value;\n\n      this._executeHandlers();\n    };\n\n    const resolve = (value: unknown): void => {\n      setResult(STATE_RESOLVED, value);\n    };\n\n    const reject = (reason: unknown): void => {\n      setResult(STATE_REJECTED, reason);\n    };\n\n    try {\n      executor(resolve, reject);\n    } catch (e) {\n      reject(e);\n    }\n  }\n}\n","import { DEBUG_BUILD } from './debug-build';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { EventProcessor } from './types-hoist/eventprocessor';\nimport { debug } from './utils/debug-logger';\nimport { isThenable } from './utils/is';\nimport { rejectedSyncPromise, resolvedSyncPromise } from './utils/syncpromise';\n\n/**\n * Process an array of event processors, returning the processed event (or `null` if the event was dropped).\n */\nexport function notifyEventProcessors(\n  processors: EventProcessor[],\n  event: Event | null,\n  hint: EventHint,\n  index: number = 0,\n): PromiseLike<Event | null> {\n  try {\n    const result = _notifyEventProcessors(event, hint, processors, index);\n    return isThenable(result) ? result : resolvedSyncPromise(result);\n  } catch (error) {\n    return rejectedSyncPromise(error);\n  }\n}\n\nfunction _notifyEventProcessors(\n  event: Event | null,\n  hint: EventHint,\n  processors: EventProcessor[],\n  index: number,\n): Event | null | PromiseLike<Event | null> {\n  const processor = processors[index];\n\n  if (!event || !processor) {\n    return event;\n  }\n\n  const result = processor({ ...event }, hint);\n\n  DEBUG_BUILD && result === null && debug.log(`Event processor \"${processor.id || '?'}\" dropped event`);\n\n  if (isThenable(result)) {\n    return result.then(final => _notifyEventProcessors(final, hint, processors, index + 1));\n  }\n\n  return _notifyEventProcessors(result, hint, processors, index + 1);\n}\n","/**\n * Use this attribute to represent the source of a span.\n * Should be one of: custom, url, route, view, component, task, unknown\n *\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = 'sentry.source';\n\n/**\n * Attributes that holds the sample rate that was locally applied to a span.\n * If this attribute is not defined, it means that the span inherited a sampling decision.\n *\n * NOTE: Is only defined on root spans.\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = 'sentry.sample_rate';\n\n/**\n * Attribute holding the sample rate of the previous trace.\n * This is used to sample consistently across subsequent traces in the browser SDK.\n *\n * Note: Only defined on root spans, if opted into consistent sampling\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE = 'sentry.previous_trace_sample_rate';\n\n/**\n * Use this attribute to represent the operation of a span.\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_OP = 'sentry.op';\n\n/**\n * Use this attribute to represent the origin of a span.\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = 'sentry.origin';\n\n/** The reason why an idle span finished. */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON = 'sentry.idle_span_finish_reason';\n\n/** The unit of a measurement, which may be stored as a TimedEvent. */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = 'sentry.measurement_unit';\n\n/** The value of a measurement, which may be stored as a TimedEvent. */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = 'sentry.measurement_value';\n\n/**\n * A custom span name set by users guaranteed to be taken over any automatically\n * inferred name. This attribute is removed before the span is sent.\n *\n * @internal only meant for internal SDK usage\n * @hidden\n */\nexport const SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = 'sentry.custom_span_name';\n\n/**\n * The id of the profile that this span occurred in.\n */\nexport const SEMANTIC_ATTRIBUTE_PROFILE_ID = 'sentry.profile_id';\n\nexport const SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = 'sentry.exclusive_time';\n\nexport const SEMANTIC_ATTRIBUTE_CACHE_HIT = 'cache.hit';\n\nexport const SEMANTIC_ATTRIBUTE_CACHE_KEY = 'cache.key';\n\nexport const SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = 'cache.item_size';\n\n/** TODO: Remove these once we update to latest semantic conventions */\nexport const SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = 'http.request.method';\nexport const SEMANTIC_ATTRIBUTE_URL_FULL = 'url.full';\n\n/**\n * A span link attribute to mark the link as a special span link.\n *\n * Known values:\n * - `previous_trace`: The span links to the frontend root span of the previous trace.\n * - `next_trace`: The span links to the frontend root span of the next trace. (Not set by the SDK)\n *\n * Other values may be set as appropriate.\n * @see https://develop.sentry.dev/sdk/telemetry/traces/span-links/#link-types\n */\nexport const SEMANTIC_LINK_ATTRIBUTE_LINK_TYPE = 'sentry.link.type';\n","import type { Client } from '../client';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { DsnComponents, DsnLike, DsnProtocol } from '../types-hoist/dsn';\nimport { consoleSandbox, debug } from './debug-logger';\n\n/** Regular expression used to extract org ID from a DSN host. */\nconst ORG_ID_REGEX = /^o(\\d+)\\./;\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol?: string): protocol is DsnProtocol {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nexport function dsnToString(dsn: DsnComponents, withPassword: boolean = false): string {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */\nexport function dsnFromString(str: string): DsnComponents | undefined {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    // This should be logged to the console\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.error(`Invalid Sentry Dsn: ${str}`);\n    });\n    return undefined;\n  }\n\n  const [protocol, publicKey, pass = '', host = '', port = '', lastPath = ''] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() as string;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n}\n\nfunction dsnFromComponents(components: DsnComponents): DsnComponents {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn: DsnComponents): boolean {\n  if (!DEBUG_BUILD) {\n    return true;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents: ReadonlyArray<keyof DsnComponents> = ['protocol', 'publicKey', 'host', 'projectId'];\n  const hasMissingRequiredComponent = requiredComponents.find(component => {\n    if (!dsn[component]) {\n      debug.error(`Invalid Sentry Dsn: ${component} missing`);\n      return true;\n    }\n    return false;\n  });\n\n  if (hasMissingRequiredComponent) {\n    return false;\n  }\n\n  if (!projectId.match(/^\\d+$/)) {\n    debug.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n    return false;\n  }\n\n  if (!isValidProtocol(protocol)) {\n    debug.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n    return false;\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    debug.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Extract the org ID from a DSN host.\n *\n * @param host The host from a DSN\n * @returns The org ID if found, undefined otherwise\n */\nexport function extractOrgIdFromDsnHost(host: string): string | undefined {\n  const match = host.match(ORG_ID_REGEX);\n\n  return match?.[1];\n}\n\n/**\n *  Returns the organization ID of the client.\n *\n *  The organization ID is extracted from the DSN. If the client options include a `orgId`, this will always take precedence.\n */\nexport function extractOrgIdFromClient(client: Client): string | undefined {\n  const options = client.getOptions();\n\n  const { host } = client.getDsn() || {};\n\n  let org_id: string | undefined;\n\n  if (options.orgId) {\n    org_id = String(options.orgId);\n  } else if (host) {\n    org_id = extractOrgIdFromDsnHost(host);\n  }\n\n  return org_id;\n}\n\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */\nexport function makeDsn(from: DsnLike): DsnComponents | undefined {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  if (!components || !validateDsn(components)) {\n    return undefined;\n  }\n  return components;\n}\n","import { DEBUG_BUILD } from '../debug-build';\nimport type { DynamicSamplingContext } from '../types-hoist/envelope';\nimport { debug } from './debug-logger';\nimport { isString } from './is';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\n\nexport const SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */\nexport const MAX_BAGGAGE_STRING_LENGTH = 8192;\n\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */\nexport function baggageHeaderToDynamicSamplingContext(\n  // Very liberal definition of what any incoming header might look like\n  baggageHeader: string | string[] | number | null | undefined | boolean,\n): Partial<DynamicSamplingContext> | undefined {\n  const baggageObject = parseBaggageHeader(baggageHeader);\n\n  if (!baggageObject) {\n    return undefined;\n  }\n\n  // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n  const dynamicSamplingContext = Object.entries(baggageObject).reduce<Record<string, string>>((acc, [key, value]) => {\n    if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n      const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n      acc[nonPrefixedKey] = value;\n    }\n    return acc;\n  }, {});\n\n  // Only return a dynamic sampling context object if there are keys in it.\n  // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n  if (Object.keys(dynamicSamplingContext).length > 0) {\n    return dynamicSamplingContext as Partial<DynamicSamplingContext>;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */\nexport function dynamicSamplingContextToSentryBaggageHeader(\n  // this also takes undefined for convenience and bundle size in other places\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>,\n): string | undefined {\n  if (!dynamicSamplingContext) {\n    return undefined;\n  }\n\n  // Prefix all DSC keys with \"sentry-\" and put them into a new object\n  const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce<Record<string, string>>(\n    (acc, [dscKey, dscValue]) => {\n      if (dscValue) {\n        acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n      }\n      return acc;\n    },\n    {},\n  );\n\n  return objectToBaggageHeader(sentryPrefixedDSC);\n}\n\n/**\n * Take a baggage header and parse it into an object.\n */\nexport function parseBaggageHeader(\n  baggageHeader: string | string[] | number | null | undefined | boolean,\n): Record<string, string> | undefined {\n  if (!baggageHeader || (!isString(baggageHeader) && !Array.isArray(baggageHeader))) {\n    return undefined;\n  }\n\n  if (Array.isArray(baggageHeader)) {\n    // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n    return baggageHeader.reduce<Record<string, string>>((acc, curr) => {\n      const currBaggageObject = baggageHeaderToObject(curr);\n      Object.entries(currBaggageObject).forEach(([key, value]) => {\n        acc[key] = value;\n      });\n      return acc;\n    }, {});\n  }\n\n  return baggageHeaderToObject(baggageHeader);\n}\n\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */\nfunction baggageHeaderToObject(baggageHeader: string): Record<string, string> {\n  return baggageHeader\n    .split(',')\n    .map(baggageEntry => {\n      const eqIdx = baggageEntry.indexOf('=');\n      if (eqIdx === -1) {\n        // Likely an invalid entry\n        return [];\n      }\n      const key = baggageEntry.slice(0, eqIdx);\n      const value = baggageEntry.slice(eqIdx + 1);\n      return [key, value].map(keyOrValue => {\n        try {\n          return decodeURIComponent(keyOrValue.trim());\n        } catch {\n          // We ignore errors here, e.g. if the value cannot be URL decoded.\n          // This will then be skipped in the next step\n          return;\n        }\n      });\n    })\n    .reduce<Record<string, string>>((acc, [key, value]) => {\n      if (key && value) {\n        acc[key] = value;\n      }\n      return acc;\n    }, {});\n}\n\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */\nexport function objectToBaggageHeader(object: Record<string, string>): string | undefined {\n  if (Object.keys(object).length === 0) {\n    // An empty baggage header is not spec compliant: We return undefined.\n    return undefined;\n  }\n\n  return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex) => {\n    const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n    const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n    if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n      DEBUG_BUILD &&\n        debug.warn(\n          `Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`,\n        );\n      return baggageHeader;\n    } else {\n      return newBaggageHeader;\n    }\n  }, '');\n}\n","import { getClient } from '../currentScopes';\nimport type { CoreOptions } from '../types-hoist/options';\n\n// Treeshakable guard to remove all code related to tracing\ndeclare const __SENTRY_TRACING__: boolean | undefined;\n\n/**\n * Determines if span recording is currently enabled.\n *\n * Spans are recorded when at least one of `tracesSampleRate` and `tracesSampler`\n * is defined in the SDK config. This function does not make any assumption about\n * sampling decisions, it only checks if the SDK is configured to record spans.\n *\n * Important: This function only determines if span recording is enabled. Trace\n * continuation and propagation is separately controlled and not covered by this function.\n * If this function returns `false`, traces can still be propagated (which is what\n * we refer to by \"Tracing without Performance\")\n * @see https://develop.sentry.dev/sdk/telemetry/traces/tracing-without-performance/\n *\n * @param maybeOptions An SDK options object to be passed to this function.\n * If this option is not provided, the function will use the current client's options.\n */\nexport function hasSpansEnabled(\n  maybeOptions?: Pick<CoreOptions, 'tracesSampleRate' | 'tracesSampler'> | undefined,\n): boolean {\n  if (typeof __SENTRY_TRACING__ === 'boolean' && !__SENTRY_TRACING__) {\n    return false;\n  }\n\n  const options = maybeOptions || getClient()?.getOptions();\n  return (\n    !!options &&\n    // Note: This check is `!= null`, meaning \"nullish\". `0` is not \"nullish\", `undefined` and `null` are. (This comment was brought to you by 15 minutes of questioning life)\n    (options.tracesSampleRate != null || !!options.tracesSampler)\n  );\n}\n","import type { Span } from '../types-hoist/span';\nimport type { SpanStatus } from '../types-hoist/spanStatus';\n\nexport const SPAN_STATUS_UNSET = 0;\nexport const SPAN_STATUS_OK = 1;\nexport const SPAN_STATUS_ERROR = 2;\n\n/**\n * Converts a HTTP status code into a sentry status with a message.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\n// https://develop.sentry.dev/sdk/event-payloads/span/\nexport function getSpanStatusFromHttpCode(httpStatus: number): SpanStatus {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return { code: SPAN_STATUS_OK };\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return { code: SPAN_STATUS_ERROR, message: 'unauthenticated' };\n      case 403:\n        return { code: SPAN_STATUS_ERROR, message: 'permission_denied' };\n      case 404:\n        return { code: SPAN_STATUS_ERROR, message: 'not_found' };\n      case 409:\n        return { code: SPAN_STATUS_ERROR, message: 'already_exists' };\n      case 413:\n        return { code: SPAN_STATUS_ERROR, message: 'failed_precondition' };\n      case 429:\n        return { code: SPAN_STATUS_ERROR, message: 'resource_exhausted' };\n      case 499:\n        return { code: SPAN_STATUS_ERROR, message: 'cancelled' };\n      default:\n        return { code: SPAN_STATUS_ERROR, message: 'invalid_argument' };\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return { code: SPAN_STATUS_ERROR, message: 'unimplemented' };\n      case 503:\n        return { code: SPAN_STATUS_ERROR, message: 'unavailable' };\n      case 504:\n        return { code: SPAN_STATUS_ERROR, message: 'deadline_exceeded' };\n      default:\n        return { code: SPAN_STATUS_ERROR, message: 'internal_error' };\n    }\n  }\n\n  return { code: SPAN_STATUS_ERROR, message: 'unknown_error' };\n}\n\n/**\n * Sets the Http status attributes on the current span based on the http code.\n * Additionally, the span's status is updated, depending on the http code.\n */\nexport function setHttpStatus(span: Span, httpStatus: number): void {\n  span.setAttribute('http.response.status_code', httpStatus);\n\n  const spanStatus = getSpanStatusFromHttpCode(httpStatus);\n  if (spanStatus.message !== 'unknown_error') {\n    span.setStatus(spanStatus);\n  }\n}\n","import type { Scope } from '../scope';\nimport type { Span } from '../types-hoist/span';\nimport { addNonEnumerableProperty } from '../utils/object';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\n\nconst SCOPE_ON_START_SPAN_FIELD = '_sentryScope';\nconst ISOLATION_SCOPE_ON_START_SPAN_FIELD = '_sentryIsolationScope';\n\ntype ScopeWeakRef = { deref(): Scope | undefined } | Scope;\n\ntype SpanWithScopes = Span & {\n  [SCOPE_ON_START_SPAN_FIELD]?: Scope;\n  [ISOLATION_SCOPE_ON_START_SPAN_FIELD]?: ScopeWeakRef;\n};\n\n/** Wrap a scope with a WeakRef if available, falling back to a direct scope. */\nfunction wrapScopeWithWeakRef(scope: Scope): ScopeWeakRef {\n  try {\n    // @ts-expect-error - WeakRef is not available in all environments\n    const WeakRefClass = GLOBAL_OBJ.WeakRef;\n    if (typeof WeakRefClass === 'function') {\n      return new WeakRefClass(scope);\n    }\n  } catch {\n    // WeakRef not available or failed to create\n    // We'll fall back to a direct scope\n  }\n\n  return scope;\n}\n\n/** Try to unwrap a scope from a potential WeakRef wrapper. */\nfunction unwrapScopeFromWeakRef(scopeRef: ScopeWeakRef | undefined): Scope | undefined {\n  if (!scopeRef) {\n    return undefined;\n  }\n\n  if (typeof scopeRef === 'object' && 'deref' in scopeRef && typeof scopeRef.deref === 'function') {\n    try {\n      return scopeRef.deref();\n    } catch {\n      return undefined;\n    }\n  }\n\n  // Fallback to a direct scope\n  return scopeRef as Scope;\n}\n\n/** Store the scope & isolation scope for a span, which can the be used when it is finished. */\nexport function setCapturedScopesOnSpan(span: Span | undefined, scope: Scope, isolationScope: Scope): void {\n  if (span) {\n    addNonEnumerableProperty(span, ISOLATION_SCOPE_ON_START_SPAN_FIELD, wrapScopeWithWeakRef(isolationScope));\n    // We don't wrap the scope with a WeakRef here because webkit aggressively garbage collects\n    // and scopes are not held in memory for long periods of time.\n    addNonEnumerableProperty(span, SCOPE_ON_START_SPAN_FIELD, scope);\n  }\n}\n\n/**\n * Grabs the scope and isolation scope off a span that were active when the span was started.\n * If WeakRef was used and scopes have been garbage collected, returns undefined for those scopes.\n */\nexport function getCapturedScopesOnSpan(span: Span): { scope?: Scope; isolationScope?: Scope } {\n  const spanWithScopes = span as SpanWithScopes;\n\n  return {\n    scope: spanWithScopes[SCOPE_ON_START_SPAN_FIELD],\n    isolationScope: unwrapScopeFromWeakRef(spanWithScopes[ISOLATION_SCOPE_ON_START_SPAN_FIELD]),\n  };\n}\n","import type { Client } from '../client';\nimport type { DynamicSamplingContext } from '../types-hoist/envelope';\nimport type { PropagationContext } from '../types-hoist/tracing';\nimport type { TraceparentData } from '../types-hoist/transaction';\nimport { debug } from '../utils/debug-logger';\nimport { baggageHeaderToDynamicSamplingContext } from './baggage';\nimport { extractOrgIdFromClient } from './dsn';\nimport { parseSampleRate } from './parseSampleRate';\nimport { generateSpanId, generateTraceId } from './propagationContext';\n\n// eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- RegExp is used for readability here\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * This is terrible naming but the function has nothing to do with the W3C traceparent header.\n * It can only parse the `sentry-trace` header and extract the \"trace parent\" data.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent?: string): TraceparentData | undefined {\n  if (!traceparent) {\n    return undefined;\n  }\n\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (!matches) {\n    return undefined;\n  }\n\n  let parentSampled: boolean | undefined;\n  if (matches[3] === '1') {\n    parentSampled = true;\n  } else if (matches[3] === '0') {\n    parentSampled = false;\n  }\n\n  return {\n    traceId: matches[1],\n    parentSampled,\n    parentSpanId: matches[2],\n  };\n}\n\n/**\n * Create a propagation context from incoming headers or\n * creates a minimal new one if the headers are undefined.\n */\nexport function propagationContextFromHeaders(\n  sentryTrace: string | undefined,\n  baggage: string | number | boolean | string[] | null | undefined,\n): PropagationContext {\n  const traceparentData = extractTraceparentData(sentryTrace);\n  const dynamicSamplingContext = baggageHeaderToDynamicSamplingContext(baggage);\n\n  if (!traceparentData?.traceId) {\n    return {\n      traceId: generateTraceId(),\n      sampleRand: Math.random(),\n    };\n  }\n\n  const sampleRand = getSampleRandFromTraceparentAndDsc(traceparentData, dynamicSamplingContext);\n\n  // The sample_rand on the DSC needs to be generated based on traceparent + baggage.\n  if (dynamicSamplingContext) {\n    dynamicSamplingContext.sample_rand = sampleRand.toString();\n  }\n\n  const { traceId, parentSpanId, parentSampled } = traceparentData;\n\n  return {\n    traceId,\n    parentSpanId,\n    sampled: parentSampled,\n    dsc: dynamicSamplingContext || {}, // If we have traceparent data but no DSC it means we are not head of trace and we must freeze it\n    sampleRand,\n  };\n}\n\n/**\n * Create sentry-trace header from span context values.\n */\nexport function generateSentryTraceHeader(\n  traceId: string | undefined = generateTraceId(),\n  spanId: string | undefined = generateSpanId(),\n  sampled?: boolean,\n): string {\n  let sampledString = '';\n  if (sampled !== undefined) {\n    sampledString = sampled ? '-1' : '-0';\n  }\n  return `${traceId}-${spanId}${sampledString}`;\n}\n\n/**\n * Creates a W3C traceparent header from the given trace and span ids.\n */\nexport function generateTraceparentHeader(\n  traceId: string | undefined = generateTraceId(),\n  spanId: string | undefined = generateSpanId(),\n  sampled?: boolean,\n): string {\n  return `00-${traceId}-${spanId}-${sampled ? '01' : '00'}`;\n}\n\n/**\n * Given any combination of an incoming trace, generate a sample rand based on its defined semantics.\n *\n * Read more: https://develop.sentry.dev/sdk/telemetry/traces/#propagated-random-value\n */\nfunction getSampleRandFromTraceparentAndDsc(\n  traceparentData: TraceparentData | undefined,\n  dsc: Partial<DynamicSamplingContext> | undefined,\n): number {\n  // When there is an incoming sample rand use it.\n  const parsedSampleRand = parseSampleRate(dsc?.sample_rand);\n  if (parsedSampleRand !== undefined) {\n    return parsedSampleRand;\n  }\n\n  // Otherwise, if there is an incoming sampling decision + sample rate, generate a sample rand that would lead to the same sampling decision.\n  const parsedSampleRate = parseSampleRate(dsc?.sample_rate);\n  if (parsedSampleRate && traceparentData?.parentSampled !== undefined) {\n    return traceparentData.parentSampled\n      ? // Returns a sample rand with positive sampling decision [0, sampleRate)\n        Math.random() * parsedSampleRate\n      : // Returns a sample rand with negative sampling decision [sampleRate, 1)\n        parsedSampleRate + Math.random() * (1 - parsedSampleRate);\n  } else {\n    // If nothing applies, return a random sample rand.\n    return Math.random();\n  }\n}\n\n/**\n * Determines whether a new trace should be continued based on the provided baggage org ID and the client's `strictTraceContinuation` option.\n * If the trace should not be continued, a new trace will be started.\n *\n * The result is dependent on the `strictTraceContinuation` option in the client.\n * See https://develop.sentry.dev/sdk/telemetry/traces/#stricttracecontinuation\n */\nexport function shouldContinueTrace(client: Client, baggageOrgId?: string): boolean {\n  const clientOrgId = extractOrgIdFromClient(client);\n\n  // Case: baggage orgID and Client orgID don't match - always start new trace\n  if (baggageOrgId && clientOrgId && baggageOrgId !== clientOrgId) {\n    debug.log(\n      `Won't continue trace because org IDs don't match (incoming baggage: ${baggageOrgId}, SDK options: ${clientOrgId})`,\n    );\n    return false;\n  }\n\n  const strictTraceContinuation = client.getOptions().strictTraceContinuation || false; // default for `strictTraceContinuation` is `false`\n\n  if (strictTraceContinuation) {\n    // With strict continuation enabled, don't continue trace if:\n    // - Baggage has orgID, but Client doesn't have one\n    // - Client has orgID, but baggage doesn't have one\n    if ((baggageOrgId && !clientOrgId) || (!baggageOrgId && clientOrgId)) {\n      debug.log(\n        `Starting a new trace because strict trace continuation is enabled but one org ID is missing (incoming baggage: ${baggageOrgId}, Sentry client: ${clientOrgId})`,\n      );\n      return false;\n    }\n  }\n\n  return true;\n}\n","/**\n * Parse a sample rate from a given value.\n * This will either return a boolean or number sample rate, if the sample rate is valid (between 0 and 1).\n * If a string is passed, we try to convert it to a number.\n *\n * Any invalid sample rate will return `undefined`.\n */\nexport function parseSampleRate(sampleRate: unknown): number | undefined {\n  if (typeof sampleRate === 'boolean') {\n    return Number(sampleRate);\n  }\n\n  const rate = typeof sampleRate === 'string' ? parseFloat(sampleRate) : sampleRate;\n  if (typeof rate !== 'number' || isNaN(rate) || rate < 0 || rate > 1) {\n    return undefined;\n  }\n\n  return rate;\n}\n","import { getAsyncContextStrategy } from '../asyncContext';\nimport { getMainCarrier } from '../carrier';\nimport { getCurrentScope } from '../currentScopes';\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n} from '../semanticAttributes';\nimport type { SentrySpan } from '../tracing/sentrySpan';\nimport { SPAN_STATUS_OK, SPAN_STATUS_UNSET } from '../tracing/spanstatus';\nimport { getCapturedScopesOnSpan } from '../tracing/utils';\nimport type { TraceContext } from '../types-hoist/context';\nimport type { SpanLink, SpanLinkJSON } from '../types-hoist/link';\nimport type { Span, SpanAttributes, SpanJSON, SpanOrigin, SpanTimeInput } from '../types-hoist/span';\nimport type { SpanStatus } from '../types-hoist/spanStatus';\nimport { addNonEnumerableProperty } from '../utils/object';\nimport { generateSpanId } from '../utils/propagationContext';\nimport { timestampInSeconds } from '../utils/time';\nimport { generateSentryTraceHeader, generateTraceparentHeader } from '../utils/tracing';\nimport { consoleSandbox } from './debug-logger';\nimport { _getSpanForScope } from './spanOnScope';\n\n// These are aligned with OpenTelemetry trace flags\nexport const TRACE_FLAG_NONE = 0x0;\nexport const TRACE_FLAG_SAMPLED = 0x1;\n\nlet hasShownSpanDropWarning = false;\n\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in an event.\n * By default, this will only include trace_id, span_id & parent_span_id.\n * If `includeAllData` is true, it will also include data, op, status & origin.\n */\nexport function spanToTransactionTraceContext(span: Span): TraceContext {\n  const { spanId: span_id, traceId: trace_id } = span.spanContext();\n  const { data, op, parent_span_id, status, origin, links } = spanToJSON(span);\n\n  return {\n    parent_span_id,\n    span_id,\n    trace_id,\n    data,\n    op,\n    status,\n    origin,\n    links,\n  };\n}\n\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in a non-transaction event.\n */\nexport function spanToTraceContext(span: Span): TraceContext {\n  const { spanId, traceId: trace_id, isRemote } = span.spanContext();\n\n  // If the span is remote, we use a random/virtual span as span_id to the trace context,\n  // and the remote span as parent_span_id\n  const parent_span_id = isRemote ? spanId : spanToJSON(span).parent_span_id;\n  const scope = getCapturedScopesOnSpan(span).scope;\n\n  const span_id = isRemote ? scope?.getPropagationContext().propagationSpanId || generateSpanId() : spanId;\n\n  return {\n    parent_span_id,\n    span_id,\n    trace_id,\n  };\n}\n\n/**\n * Convert a Span to a Sentry trace header.\n */\nexport function spanToTraceHeader(span: Span): string {\n  const { traceId, spanId } = span.spanContext();\n  const sampled = spanIsSampled(span);\n  return generateSentryTraceHeader(traceId, spanId, sampled);\n}\n\n/**\n * Convert a Span to a W3C traceparent header.\n */\nexport function spanToTraceparentHeader(span: Span): string {\n  const { traceId, spanId } = span.spanContext();\n  const sampled = spanIsSampled(span);\n  return generateTraceparentHeader(traceId, spanId, sampled);\n}\n\n/**\n *  Converts the span links array to a flattened version to be sent within an envelope.\n *\n *  If the links array is empty, it returns `undefined` so the empty value can be dropped before it's sent.\n */\nexport function convertSpanLinksForEnvelope(links?: SpanLink[]): SpanLinkJSON[] | undefined {\n  if (links && links.length > 0) {\n    return links.map(({ context: { spanId, traceId, traceFlags, ...restContext }, attributes }) => ({\n      span_id: spanId,\n      trace_id: traceId,\n      sampled: traceFlags === TRACE_FLAG_SAMPLED,\n      attributes,\n      ...restContext,\n    }));\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Convert a span time input into a timestamp in seconds.\n */\nexport function spanTimeInputToSeconds(input: SpanTimeInput | undefined): number {\n  if (typeof input === 'number') {\n    return ensureTimestampInSeconds(input);\n  }\n\n  if (Array.isArray(input)) {\n    // See {@link HrTime} for the array-based time format\n    return input[0] + input[1] / 1e9;\n  }\n\n  if (input instanceof Date) {\n    return ensureTimestampInSeconds(input.getTime());\n  }\n\n  return timestampInSeconds();\n}\n\n/**\n * Converts a timestamp to second, if it was in milliseconds, or keeps it as second.\n */\nfunction ensureTimestampInSeconds(timestamp: number): number {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp / 1000 : timestamp;\n}\n\n/**\n * Convert a span to a JSON representation.\n */\n// Note: Because of this, we currently have a circular type dependency (which we opted out of in package.json).\n// This is not avoidable as we need `spanToJSON` in `spanUtils.ts`, which in turn is needed by `span.ts` for backwards compatibility.\n// And `spanToJSON` needs the Span class from `span.ts` to check here.\nexport function spanToJSON(span: Span): SpanJSON {\n  if (spanIsSentrySpan(span)) {\n    return span.getSpanJSON();\n  }\n\n  const { spanId: span_id, traceId: trace_id } = span.spanContext();\n\n  // Handle a span from @opentelemetry/sdk-base-trace's `Span` class\n  if (spanIsOpenTelemetrySdkTraceBaseSpan(span)) {\n    const { attributes, startTime, name, endTime, status, links } = span;\n\n    // In preparation for the next major of OpenTelemetry, we want to support\n    // looking up the parent span id according to the new API\n    // In OTel v1, the parent span id is accessed as `parentSpanId`\n    // In OTel v2, the parent span id is accessed as `spanId` on the `parentSpanContext`\n    const parentSpanId =\n      'parentSpanId' in span\n        ? span.parentSpanId\n        : 'parentSpanContext' in span\n          ? (span.parentSpanContext as { spanId?: string } | undefined)?.spanId\n          : undefined;\n\n    return {\n      span_id,\n      trace_id,\n      data: attributes,\n      description: name,\n      parent_span_id: parentSpanId,\n      start_timestamp: spanTimeInputToSeconds(startTime),\n      // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n      timestamp: spanTimeInputToSeconds(endTime) || undefined,\n      status: getStatusMessage(status),\n      op: attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP],\n      origin: attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] as SpanOrigin | undefined,\n      links: convertSpanLinksForEnvelope(links),\n    };\n  }\n\n  // Finally, at least we have `spanContext()`....\n  // This should not actually happen in reality, but we need to handle it for type safety.\n  return {\n    span_id,\n    trace_id,\n    start_timestamp: 0,\n    data: {},\n  };\n}\n\nfunction spanIsOpenTelemetrySdkTraceBaseSpan(span: Span): span is OpenTelemetrySdkTraceBaseSpan {\n  const castSpan = span as Partial<OpenTelemetrySdkTraceBaseSpan>;\n  return !!castSpan.attributes && !!castSpan.startTime && !!castSpan.name && !!castSpan.endTime && !!castSpan.status;\n}\n\n/** Exported only for tests. */\nexport interface OpenTelemetrySdkTraceBaseSpan extends Span {\n  attributes: SpanAttributes;\n  startTime: SpanTimeInput;\n  name: string;\n  status: SpanStatus;\n  endTime: SpanTimeInput;\n  parentSpanId?: string;\n  links?: SpanLink[];\n}\n\n/**\n * Sadly, due to circular dependency checks we cannot actually import the Span class here and check for instanceof.\n * :( So instead we approximate this by checking if it has the `getSpanJSON` method.\n */\nfunction spanIsSentrySpan(span: Span): span is SentrySpan {\n  return typeof (span as SentrySpan).getSpanJSON === 'function';\n}\n\n/**\n * Returns true if a span is sampled.\n * In most cases, you should just use `span.isRecording()` instead.\n * However, this has a slightly different semantic, as it also returns false if the span is finished.\n * So in the case where this distinction is important, use this method.\n */\nexport function spanIsSampled(span: Span): boolean {\n  // We align our trace flags with the ones OpenTelemetry use\n  // So we also check for sampled the same way they do.\n  const { traceFlags } = span.spanContext();\n  return traceFlags === TRACE_FLAG_SAMPLED;\n}\n\n/** Get the status message to use for a JSON representation of a span. */\nexport function getStatusMessage(status: SpanStatus | undefined): string | undefined {\n  if (!status || status.code === SPAN_STATUS_UNSET) {\n    return undefined;\n  }\n\n  if (status.code === SPAN_STATUS_OK) {\n    return 'ok';\n  }\n\n  return status.message || 'unknown_error';\n}\n\nconst CHILD_SPANS_FIELD = '_sentryChildSpans';\nconst ROOT_SPAN_FIELD = '_sentryRootSpan';\n\ntype SpanWithPotentialChildren = Span & {\n  [CHILD_SPANS_FIELD]?: Set<Span>;\n  [ROOT_SPAN_FIELD]?: Span;\n};\n\n/**\n * Adds an opaque child span reference to a span.\n */\nexport function addChildSpanToSpan(span: SpanWithPotentialChildren, childSpan: Span): void {\n  // We store the root span reference on the child span\n  // We need this for `getRootSpan()` to work\n  const rootSpan = span[ROOT_SPAN_FIELD] || span;\n  addNonEnumerableProperty(childSpan as SpanWithPotentialChildren, ROOT_SPAN_FIELD, rootSpan);\n\n  // We store a list of child spans on the parent span\n  // We need this for `getSpanDescendants()` to work\n  if (span[CHILD_SPANS_FIELD]) {\n    span[CHILD_SPANS_FIELD].add(childSpan);\n  } else {\n    addNonEnumerableProperty(span, CHILD_SPANS_FIELD, new Set([childSpan]));\n  }\n}\n\n/** This is only used internally by Idle Spans. */\nexport function removeChildSpanFromSpan(span: SpanWithPotentialChildren, childSpan: Span): void {\n  if (span[CHILD_SPANS_FIELD]) {\n    span[CHILD_SPANS_FIELD].delete(childSpan);\n  }\n}\n\n/**\n * Returns an array of the given span and all of its descendants.\n */\nexport function getSpanDescendants(span: SpanWithPotentialChildren): Span[] {\n  const resultSet = new Set<Span>();\n\n  function addSpanChildren(span: SpanWithPotentialChildren): void {\n    // This exit condition is required to not infinitely loop in case of a circular dependency.\n    if (resultSet.has(span)) {\n      return;\n      // We want to ignore unsampled spans (e.g. non recording spans)\n    } else if (spanIsSampled(span)) {\n      resultSet.add(span);\n      const childSpans = span[CHILD_SPANS_FIELD] ? Array.from(span[CHILD_SPANS_FIELD]) : [];\n      for (const childSpan of childSpans) {\n        addSpanChildren(childSpan);\n      }\n    }\n  }\n\n  addSpanChildren(span);\n\n  return Array.from(resultSet);\n}\n\n/**\n * Returns the root span of a given span.\n */\nexport function getRootSpan(span: SpanWithPotentialChildren): Span {\n  return span[ROOT_SPAN_FIELD] || span;\n}\n\n/**\n * Returns the currently active span.\n */\nexport function getActiveSpan(): Span | undefined {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  if (acs.getActiveSpan) {\n    return acs.getActiveSpan();\n  }\n\n  return _getSpanForScope(getCurrentScope());\n}\n\n/**\n * Logs a warning once if `beforeSendSpan` is used to drop spans.\n */\nexport function showSpanDropWarning(): void {\n  if (!hasShownSpanDropWarning) {\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[Sentry] Returning null from `beforeSendSpan` is disallowed. To drop certain spans, configure the respective integrations directly or use `ignoreSpans`.',\n      );\n    });\n    hasShownSpanDropWarning = true;\n  }\n}\n\n/**\n * Updates the name of the given span and ensures that the span name is not\n * overwritten by the Sentry SDK.\n *\n * Use this function instead of `span.updateName()` if you want to make sure that\n * your name is kept. For some spans, for example root `http.server` spans the\n * Sentry SDK would otherwise overwrite the span name with a high-quality name\n * it infers when the span ends.\n *\n * Use this function in server code or when your span is started on the server\n * and on the client (browser). If you only update a span name on the client,\n * you can also use `span.updateName()` the SDK does not overwrite the name.\n *\n * @param span - The span to update the name of.\n * @param name - The name to set on the span.\n */\nexport function updateSpanName(span: Span, name: string): void {\n  span.updateName(name);\n  span.setAttributes({\n    [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n    [SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME]: name,\n  });\n}\n","import type { Client } from '../client';\nimport { DEFAULT_ENVIRONMENT } from '../constants';\nimport { getClient } from '../currentScopes';\nimport type { Scope } from '../scope';\nimport {\n  SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE,\n  SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n} from '../semanticAttributes';\nimport type { DynamicSamplingContext } from '../types-hoist/envelope';\nimport type { Span } from '../types-hoist/span';\nimport { baggageHeaderToDynamicSamplingContext, dynamicSamplingContextToSentryBaggageHeader } from '../utils/baggage';\nimport { extractOrgIdFromClient } from '../utils/dsn';\nimport { hasSpansEnabled } from '../utils/hasSpansEnabled';\nimport { addNonEnumerableProperty } from '../utils/object';\nimport { getRootSpan, spanIsSampled, spanToJSON } from '../utils/spanUtils';\nimport { getCapturedScopesOnSpan } from './utils';\n\n/**\n * If you change this value, also update the terser plugin config to\n * avoid minification of the object property!\n */\nconst FROZEN_DSC_FIELD = '_frozenDsc';\n\ntype SpanWithMaybeDsc = Span & {\n  [FROZEN_DSC_FIELD]?: Partial<DynamicSamplingContext> | undefined;\n};\n\n/**\n * Freeze the given DSC on the given span.\n */\nexport function freezeDscOnSpan(span: Span, dsc: Partial<DynamicSamplingContext>): void {\n  const spanWithMaybeDsc = span as SpanWithMaybeDsc;\n  addNonEnumerableProperty(spanWithMaybeDsc, FROZEN_DSC_FIELD, dsc);\n}\n\n/**\n * Creates a dynamic sampling context from a client.\n *\n * Dispatches the `createDsc` lifecycle hook as a side effect.\n */\nexport function getDynamicSamplingContextFromClient(trace_id: string, client: Client): DynamicSamplingContext {\n  const options = client.getOptions();\n\n  const { publicKey: public_key } = client.getDsn() || {};\n\n  // Instead of conditionally adding non-undefined values, we add them and then remove them if needed\n  // otherwise, the order of baggage entries changes, which \"breaks\" a bunch of tests etc.\n  const dsc: DynamicSamplingContext = {\n    environment: options.environment || DEFAULT_ENVIRONMENT,\n    release: options.release,\n    public_key,\n    trace_id,\n    org_id: extractOrgIdFromClient(client),\n  };\n\n  client.emit('createDsc', dsc);\n\n  return dsc;\n}\n\n/**\n * Get the dynamic sampling context for the currently active scopes.\n */\nexport function getDynamicSamplingContextFromScope(client: Client, scope: Scope): Partial<DynamicSamplingContext> {\n  const propagationContext = scope.getPropagationContext();\n  return propagationContext.dsc || getDynamicSamplingContextFromClient(propagationContext.traceId, client);\n}\n\n/**\n * Creates a dynamic sampling context from a span (and client and scope)\n *\n * @param span the span from which a few values like the root span name and sample rate are extracted.\n *\n * @returns a dynamic sampling context\n */\nexport function getDynamicSamplingContextFromSpan(span: Span): Readonly<Partial<DynamicSamplingContext>> {\n  const client = getClient();\n  if (!client) {\n    return {};\n  }\n\n  const rootSpan = getRootSpan(span);\n  const rootSpanJson = spanToJSON(rootSpan);\n  const rootSpanAttributes = rootSpanJson.data;\n  const traceState = rootSpan.spanContext().traceState;\n\n  // The span sample rate that was locally applied to the root span should also always be applied to the DSC, even if the DSC is frozen.\n  // This is so that the downstream traces/services can use parentSampleRate in their `tracesSampler` to make consistent sampling decisions across the entire trace.\n  const rootSpanSampleRate =\n    traceState?.get('sentry.sample_rate') ??\n    rootSpanAttributes[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] ??\n    rootSpanAttributes[SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE];\n\n  function applyLocalSampleRateToDsc(dsc: Partial<DynamicSamplingContext>): Partial<DynamicSamplingContext> {\n    if (typeof rootSpanSampleRate === 'number' || typeof rootSpanSampleRate === 'string') {\n      dsc.sample_rate = `${rootSpanSampleRate}`;\n    }\n    return dsc;\n  }\n\n  // For core implementation, we freeze the DSC onto the span as a non-enumerable property\n  const frozenDsc = (rootSpan as SpanWithMaybeDsc)[FROZEN_DSC_FIELD];\n  if (frozenDsc) {\n    return applyLocalSampleRateToDsc(frozenDsc);\n  }\n\n  // For OpenTelemetry, we freeze the DSC on the trace state\n  const traceStateDsc = traceState?.get('sentry.dsc');\n\n  // If the span has a DSC, we want it to take precedence\n  const dscOnTraceState = traceStateDsc && baggageHeaderToDynamicSamplingContext(traceStateDsc);\n\n  if (dscOnTraceState) {\n    return applyLocalSampleRateToDsc(dscOnTraceState);\n  }\n\n  // Else, we generate it from the span\n  const dsc = getDynamicSamplingContextFromClient(span.spanContext().traceId, client);\n\n  // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n  const source = rootSpanAttributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n  // after JSON conversion, txn.name becomes jsonSpan.description\n  const name = rootSpanJson.description;\n  if (source !== 'url' && name) {\n    dsc.transaction = name;\n  }\n\n  // How can we even land here with hasSpansEnabled() returning false?\n  // Otel creates a Non-recording span in Tracing Without Performance mode when handling incoming requests\n  // So we end up with an active span that is not sampled (neither positively nor negatively)\n  if (hasSpansEnabled()) {\n    dsc.sampled = String(spanIsSampled(rootSpan));\n    dsc.sample_rand =\n      // In OTEL we store the sample rand on the trace state because we cannot access scopes for NonRecordingSpans\n      // The Sentry OTEL SpanSampler takes care of writing the sample rand on the root span\n      traceState?.get('sentry.sample_rand') ??\n      // On all other platforms we can actually get the scopes from a root span (we use this as a fallback)\n      getCapturedScopesOnSpan(rootSpan).scope?.getPropagationContext().sampleRand.toString();\n  }\n\n  applyLocalSampleRateToDsc(dsc);\n\n  client.emit('createDsc', dsc, rootSpan);\n\n  return dsc;\n}\n\n/**\n * Convert a Span to a baggage header.\n */\nexport function spanToBaggageHeader(span: Span): string | undefined {\n  const dsc = getDynamicSamplingContextFromSpan(span);\n  return dynamicSamplingContextToSentryBaggageHeader(dsc);\n}\n","import type { DebugImage } from '../types-hoist/debugMeta';\nimport type { StackParser } from '../types-hoist/stacktrace';\nimport { GLOBAL_OBJ } from './worldwide';\n\ntype StackString = string;\ntype CachedResult = [string, string];\n\nlet parsedStackResults: Record<StackString, CachedResult> | undefined;\nlet lastSentryKeysCount: number | undefined;\nlet lastNativeKeysCount: number | undefined;\nlet cachedFilenameDebugIds: Record<string, string> | undefined;\n\n/**\n * Returns a map of filenames to debug identifiers.\n * Supports both proprietary _sentryDebugIds and native _debugIds (e.g., from Vercel) formats.\n */\nexport function getFilenameToDebugIdMap(stackParser: StackParser): Record<string, string> {\n  const sentryDebugIdMap = GLOBAL_OBJ._sentryDebugIds;\n  const nativeDebugIdMap = GLOBAL_OBJ._debugIds;\n\n  if (!sentryDebugIdMap && !nativeDebugIdMap) {\n    return {};\n  }\n\n  const sentryDebugIdKeys = sentryDebugIdMap ? Object.keys(sentryDebugIdMap) : [];\n  const nativeDebugIdKeys = nativeDebugIdMap ? Object.keys(nativeDebugIdMap) : [];\n\n  // If the count of registered globals hasn't changed since the last call, we\n  // can just return the cached result.\n  if (\n    cachedFilenameDebugIds &&\n    sentryDebugIdKeys.length === lastSentryKeysCount &&\n    nativeDebugIdKeys.length === lastNativeKeysCount\n  ) {\n    return cachedFilenameDebugIds;\n  }\n\n  lastSentryKeysCount = sentryDebugIdKeys.length;\n  lastNativeKeysCount = nativeDebugIdKeys.length;\n\n  // Build a map of filename -> debug_id from both sources\n  cachedFilenameDebugIds = {};\n\n  if (!parsedStackResults) {\n    parsedStackResults = {};\n  }\n\n  const processDebugIds = (debugIdKeys: string[], debugIdMap: Record<string, string>): void => {\n    for (const key of debugIdKeys) {\n      const debugId = debugIdMap[key];\n      const result = parsedStackResults?.[key];\n\n      if (result && cachedFilenameDebugIds && debugId) {\n        // Use cached filename but update with current debug ID\n        cachedFilenameDebugIds[result[0]] = debugId;\n        // Update cached result with new debug ID\n        if (parsedStackResults) {\n          parsedStackResults[key] = [result[0], debugId];\n        }\n      } else if (debugId) {\n        const parsedStack = stackParser(key);\n\n        for (let i = parsedStack.length - 1; i >= 0; i--) {\n          const stackFrame = parsedStack[i];\n          const filename = stackFrame?.filename;\n\n          if (filename && cachedFilenameDebugIds && parsedStackResults) {\n            cachedFilenameDebugIds[filename] = debugId;\n            parsedStackResults[key] = [filename, debugId];\n            break;\n          }\n        }\n      }\n    }\n  };\n\n  if (sentryDebugIdMap) {\n    processDebugIds(sentryDebugIdKeys, sentryDebugIdMap);\n  }\n\n  // Native _debugIds will override _sentryDebugIds if same file\n  if (nativeDebugIdMap) {\n    processDebugIds(nativeDebugIdKeys, nativeDebugIdMap);\n  }\n\n  return cachedFilenameDebugIds;\n}\n\n/**\n * Returns a list of debug images for the given resources.\n */\nexport function getDebugImagesForResources(\n  stackParser: StackParser,\n  resource_paths: ReadonlyArray<string>,\n): DebugImage[] {\n  const filenameDebugIdMap = getFilenameToDebugIdMap(stackParser);\n\n  if (!filenameDebugIdMap) {\n    return [];\n  }\n\n  const images: DebugImage[] = [];\n  for (const path of resource_paths) {\n    if (path && filenameDebugIdMap[path]) {\n      images.push({\n        type: 'sourcemap',\n        code_file: path,\n        debug_id: filenameDebugIdMap[path],\n      });\n    }\n  }\n\n  return images;\n}\n","import type { ScopeData } from '../scope';\nimport { getDynamicSamplingContextFromSpan } from '../tracing/dynamicSamplingContext';\nimport type { Breadcrumb } from '../types-hoist/breadcrumb';\nimport type { Event } from '../types-hoist/event';\nimport type { Span } from '../types-hoist/span';\nimport { merge } from './merge';\nimport { getRootSpan, spanToJSON, spanToTraceContext } from './spanUtils';\n\n/**\n * Applies data from the scope to the event and runs all event processors on it.\n */\nexport function applyScopeDataToEvent(event: Event, data: ScopeData): void {\n  const { fingerprint, span, breadcrumbs, sdkProcessingMetadata } = data;\n\n  // Apply general data\n  applyDataToEvent(event, data);\n\n  // We want to set the trace context for normal events only if there isn't already\n  // a trace context on the event. There is a product feature in place where we link\n  // errors with transaction and it relies on that.\n  if (span) {\n    applySpanToEvent(event, span);\n  }\n\n  applyFingerprintToEvent(event, fingerprint);\n  applyBreadcrumbsToEvent(event, breadcrumbs);\n  applySdkMetadataToEvent(event, sdkProcessingMetadata);\n}\n\n/** Merge data of two scopes together. */\nexport function mergeScopeData(data: ScopeData, mergeData: ScopeData): void {\n  const {\n    extra,\n    tags,\n    user,\n    contexts,\n    level,\n    sdkProcessingMetadata,\n    breadcrumbs,\n    fingerprint,\n    eventProcessors,\n    attachments,\n    propagationContext,\n    transactionName,\n    span,\n  } = mergeData;\n\n  mergeAndOverwriteScopeData(data, 'extra', extra);\n  mergeAndOverwriteScopeData(data, 'tags', tags);\n  mergeAndOverwriteScopeData(data, 'user', user);\n  mergeAndOverwriteScopeData(data, 'contexts', contexts);\n\n  data.sdkProcessingMetadata = merge(data.sdkProcessingMetadata, sdkProcessingMetadata, 2);\n\n  if (level) {\n    data.level = level;\n  }\n\n  if (transactionName) {\n    data.transactionName = transactionName;\n  }\n\n  if (span) {\n    data.span = span;\n  }\n\n  if (breadcrumbs.length) {\n    data.breadcrumbs = [...data.breadcrumbs, ...breadcrumbs];\n  }\n\n  if (fingerprint.length) {\n    data.fingerprint = [...data.fingerprint, ...fingerprint];\n  }\n\n  if (eventProcessors.length) {\n    data.eventProcessors = [...data.eventProcessors, ...eventProcessors];\n  }\n\n  if (attachments.length) {\n    data.attachments = [...data.attachments, ...attachments];\n  }\n\n  data.propagationContext = { ...data.propagationContext, ...propagationContext };\n}\n\n/**\n * Merges certain scope data. Undefined values will overwrite any existing values.\n * Exported only for tests.\n */\nexport function mergeAndOverwriteScopeData<\n  Prop extends 'extra' | 'tags' | 'user' | 'contexts' | 'sdkProcessingMetadata',\n  Data extends ScopeData,\n>(data: Data, prop: Prop, mergeVal: Data[Prop]): void {\n  data[prop] = merge(data[prop], mergeVal, 1);\n}\n\n/** Exported only for tests */\nexport function mergeArray<Prop extends 'breadcrumbs' | 'fingerprint'>(\n  event: Event,\n  prop: Prop,\n  mergeVal: ScopeData[Prop],\n): void {\n  const prevVal = event[prop];\n  // If we are not merging any new values,\n  // we only need to proceed if there was an empty array before (as we want to replace it with undefined)\n  if (!mergeVal.length && (!prevVal || prevVal.length)) {\n    return;\n  }\n\n  const merged = [...(prevVal || []), ...mergeVal] as ScopeData[Prop];\n  event[prop] = merged.length ? merged : undefined;\n}\n\nfunction applyDataToEvent(event: Event, data: ScopeData): void {\n  const { extra, tags, user, contexts, level, transactionName } = data;\n\n  if (Object.keys(extra).length) {\n    event.extra = { ...extra, ...event.extra };\n  }\n\n  if (Object.keys(tags).length) {\n    event.tags = { ...tags, ...event.tags };\n  }\n\n  if (Object.keys(user).length) {\n    event.user = { ...user, ...event.user };\n  }\n\n  if (Object.keys(contexts).length) {\n    event.contexts = { ...contexts, ...event.contexts };\n  }\n\n  if (level) {\n    event.level = level;\n  }\n\n  // transaction events get their `transaction` from the root span name\n  if (transactionName && event.type !== 'transaction') {\n    event.transaction = transactionName;\n  }\n}\n\nfunction applyBreadcrumbsToEvent(event: Event, breadcrumbs: Breadcrumb[]): void {\n  const mergedBreadcrumbs = [...(event.breadcrumbs || []), ...breadcrumbs];\n  event.breadcrumbs = mergedBreadcrumbs.length ? mergedBreadcrumbs : undefined;\n}\n\nfunction applySdkMetadataToEvent(event: Event, sdkProcessingMetadata: ScopeData['sdkProcessingMetadata']): void {\n  event.sdkProcessingMetadata = {\n    ...event.sdkProcessingMetadata,\n    ...sdkProcessingMetadata,\n  };\n}\n\nfunction applySpanToEvent(event: Event, span: Span): void {\n  event.contexts = {\n    trace: spanToTraceContext(span),\n    ...event.contexts,\n  };\n\n  event.sdkProcessingMetadata = {\n    dynamicSamplingContext: getDynamicSamplingContextFromSpan(span),\n    ...event.sdkProcessingMetadata,\n  };\n\n  const rootSpan = getRootSpan(span);\n  const transactionName = spanToJSON(rootSpan).description;\n  if (transactionName && !event.transaction && event.type === 'transaction') {\n    event.transaction = transactionName;\n  }\n}\n\n/**\n * Applies fingerprint from the scope to the event if there's one,\n * uses message if there's one instead or get rid of empty fingerprint\n */\nfunction applyFingerprintToEvent(event: Event, fingerprint: ScopeData['fingerprint'] | undefined): void {\n  // Make sure it's an array first and we actually have something in place\n  event.fingerprint = event.fingerprint\n    ? Array.isArray(event.fingerprint)\n      ? event.fingerprint\n      : [event.fingerprint]\n    : [];\n\n  // If we have something on the scope, then merge it with event\n  if (fingerprint) {\n    event.fingerprint = event.fingerprint.concat(fingerprint);\n  }\n\n  // If we have no data at all, remove empty array default\n  if (!event.fingerprint.length) {\n    delete event.fingerprint;\n  }\n}\n","import type { Event } from '../types-hoist/event';\nimport type { StackFrame } from '../types-hoist/stackframe';\nimport type { StackLineParser, StackParser } from '../types-hoist/stacktrace';\n\nconst STACKTRACE_FRAME_LIMIT = 50;\nexport const UNKNOWN_FUNCTION = '?';\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nexport function createStackParser(...parsers: StackLineParser[]): StackParser {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n\n  return (stack: string, skipFirstLines: number = 0, framesToPop: number = 0): StackFrame[] => {\n    const frames: StackFrame[] = [];\n    const lines = stack.split('\\n');\n\n    for (let i = skipFirstLines; i < lines.length; i++) {\n      let line = lines[i] as string;\n      // Truncate lines over 1kb because many of the regular expressions use\n      // backtracking which results in run time that increases exponentially\n      // with input size. Huge strings can result in hangs/Denial of Service:\n      // https://github.com/getsentry/sentry-javascript/issues/2286\n      if (line.length > 1024) {\n        line = line.slice(0, 1024);\n      }\n\n      // https://github.com/getsentry/sentry-javascript/issues/5459\n      // Remove webpack (error: *) wrappers\n      const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;\n\n      // https://github.com/getsentry/sentry-javascript/issues/7813\n      // Skip Error: lines\n      if (cleanedLine.match(/\\S*Error: /)) {\n        continue;\n      }\n\n      for (const parser of sortedParsers) {\n        const frame = parser(cleanedLine);\n\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n\n      if (frames.length >= STACKTRACE_FRAME_LIMIT + framesToPop) {\n        break;\n      }\n    }\n\n    return stripSentryFramesAndReverse(frames.slice(framesToPop));\n  };\n}\n\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\nexport function stackParserFromStackParserOptions(stackParser: StackParser | StackLineParser[]): StackParser {\n  if (Array.isArray(stackParser)) {\n    return createStackParser(...stackParser);\n  }\n  return stackParser;\n}\n\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */\nexport function stripSentryFramesAndReverse(stack: ReadonlyArray<StackFrame>): StackFrame[] {\n  if (!stack.length) {\n    return [];\n  }\n\n  const localStack = Array.from(stack);\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (/sentryWrapped/.test(getLastStackFrame(localStack).function || '')) {\n    localStack.pop();\n  }\n\n  // Reversing in the middle of the procedure allows us to just pop the values off the stack\n  localStack.reverse();\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {\n    localStack.pop();\n\n    // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n    // is produced within the scope itself, making it:\n    //\n    //   Sentry.captureException()\n    //   scope.captureException()\n    //\n    // instead of just the top `Sentry` call itself.\n    // This forces us to possibly strip an additional frame in the exact same was as above.\n    if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {\n      localStack.pop();\n    }\n  }\n\n  return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map(frame => ({\n    ...frame,\n    filename: frame.filename || getLastStackFrame(localStack).filename,\n    function: frame.function || UNKNOWN_FUNCTION,\n  }));\n}\n\nfunction getLastStackFrame(arr: StackFrame[]): StackFrame {\n  return arr[arr.length - 1] || {};\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nexport function getFunctionName(fn: unknown): string {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\n/**\n * Get's stack frames from an event without needing to check for undefined properties.\n */\nexport function getFramesFromEvent(event: Event): StackFrame[] | undefined {\n  const exception = event.exception;\n\n  if (exception) {\n    const frames: StackFrame[] = [];\n    try {\n      // @ts-expect-error Object could be undefined\n      exception.values.forEach(value => {\n        // @ts-expect-error Value could be undefined\n        if (value.stacktrace.frames) {\n          // @ts-expect-error Value could be undefined\n          frames.push(...value.stacktrace.frames);\n        }\n      });\n      return frames;\n    } catch {\n      return undefined;\n    }\n  }\n  return undefined;\n}\n","import { getClient, getCurrentScope, getIsolationScope, withIsolationScope } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport type { CaptureContext } from './scope';\nimport { closeSession, makeSession, updateSession } from './session';\nimport type { CheckIn, FinishedCheckIn, MonitorConfig } from './types-hoist/checkin';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { EventProcessor } from './types-hoist/eventprocessor';\nimport type { Extra, Extras } from './types-hoist/extra';\nimport type { Primitive } from './types-hoist/misc';\nimport type { Session, SessionContext } from './types-hoist/session';\nimport type { SeverityLevel } from './types-hoist/severity';\nimport type { User } from './types-hoist/user';\nimport { debug } from './utils/debug-logger';\nimport { isThenable } from './utils/is';\nimport { uuid4 } from './utils/misc';\nimport type { ExclusiveEventHintOrCaptureContext } from './utils/prepareEvent';\nimport { parseEventHintOrCaptureContext } from './utils/prepareEvent';\nimport { timestampInSeconds } from './utils/time';\nimport { GLOBAL_OBJ } from './utils/worldwide';\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception The exception to capture.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured Sentry event.\n */\nexport function captureException(exception: unknown, hint?: ExclusiveEventHintOrCaptureContext): string {\n  return getCurrentScope().captureException(exception, parseEventHintOrCaptureContext(hint));\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param captureContext Define the level of the message or pass in additional data to attach to the message.\n * @returns the id of the captured message.\n */\nexport function captureMessage(message: string, captureContext?: CaptureContext | SeverityLevel): string {\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n  return getCurrentScope().captureMessage(message, level, context);\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured event.\n */\nexport function captureEvent(event: Event, hint?: EventHint): string {\n  return getCurrentScope().captureEvent(event, hint);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\nexport function setContext(name: string, context: { [key: string]: unknown } | null): void {\n  getIsolationScope().setContext(name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: Extras): void {\n  getIsolationScope().setExtras(extras);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nexport function setExtra(key: string, extra: Extra): void {\n  getIsolationScope().setExtra(key, extra);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: Primitive }): void {\n  getIsolationScope().setTags(tags);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nexport function setTag(key: string, value: Primitive): void {\n  getIsolationScope().setTag(key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): void {\n  getIsolationScope().setUser(user);\n}\n\n/**\n * The last error event id of the isolation scope.\n *\n * Warning: This function really returns the last recorded error event id on the current\n * isolation scope. If you call this function after handling a certain error and another error\n * is captured in between, the last one is returned instead of the one you might expect.\n * Also, ids of events that were never sent to Sentry (for example because\n * they were dropped in `beforeSend`) could be returned.\n *\n * @returns The last event id of the isolation scope.\n */\nexport function lastEventId(): string | undefined {\n  return getIsolationScope().lastEventId();\n}\n\n/**\n * Create a cron monitor check in and send it to Sentry.\n *\n * @param checkIn An object that describes a check in.\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nexport function captureCheckIn(checkIn: CheckIn, upsertMonitorConfig?: MonitorConfig): string {\n  const scope = getCurrentScope();\n  const client = getClient();\n  if (!client) {\n    DEBUG_BUILD && debug.warn('Cannot capture check-in. No client defined.');\n  } else if (!client.captureCheckIn) {\n    DEBUG_BUILD && debug.warn('Cannot capture check-in. Client does not support sending check-ins.');\n  } else {\n    return client.captureCheckIn(checkIn, upsertMonitorConfig, scope);\n  }\n\n  return uuid4();\n}\n\n/**\n * Wraps a callback with a cron monitor check in. The check in will be sent to Sentry when the callback finishes.\n *\n * @param monitorSlug The distinct slug of the monitor.\n * @param callback Callback to be monitored\n * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n * to create a monitor automatically when sending a check in.\n */\nexport function withMonitor<T>(\n  monitorSlug: CheckIn['monitorSlug'],\n  callback: () => T,\n  upsertMonitorConfig?: MonitorConfig,\n): T {\n  const checkInId = captureCheckIn({ monitorSlug, status: 'in_progress' }, upsertMonitorConfig);\n  const now = timestampInSeconds();\n\n  function finishCheckIn(status: FinishedCheckIn['status']): void {\n    captureCheckIn({ monitorSlug, status, checkInId, duration: timestampInSeconds() - now });\n  }\n\n  return withIsolationScope(() => {\n    let maybePromiseResult: T;\n    try {\n      maybePromiseResult = callback();\n    } catch (e) {\n      finishCheckIn('error');\n      throw e;\n    }\n\n    if (isThenable(maybePromiseResult)) {\n      return maybePromiseResult.then(\n        r => {\n          finishCheckIn('ok');\n          return r;\n        },\n        e => {\n          finishCheckIn('error');\n          throw e;\n        },\n      ) as T;\n    }\n    finishCheckIn('ok');\n\n    return maybePromiseResult;\n  });\n}\n\n/**\n * Call `flush()` on the current client, if there is one. See {@link Client.flush}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue. Omitting this parameter will cause\n * the client to wait until all events are sent before resolving the promise.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport async function flush(timeout?: number): Promise<boolean> {\n  const client = getClient();\n  if (client) {\n    return client.flush(timeout);\n  }\n  DEBUG_BUILD && debug.warn('Cannot flush events. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * Call `close()` on the current client, if there is one. See {@link Client.close}.\n *\n * @param timeout Maximum time in ms the client should wait to flush its event queue before shutting down. Omitting this\n * parameter will cause the client to wait until all events are sent before disabling itself.\n * @returns A promise which resolves to `true` if the queue successfully drains before the timeout, or `false` if it\n * doesn't (or if there's no client defined).\n */\nexport async function close(timeout?: number): Promise<boolean> {\n  const client = getClient();\n  if (client) {\n    return client.close(timeout);\n  }\n  DEBUG_BUILD && debug.warn('Cannot flush events and disable SDK. No client defined.');\n  return Promise.resolve(false);\n}\n\n/**\n * Returns true if Sentry has been properly initialized.\n */\nexport function isInitialized(): boolean {\n  return !!getClient();\n}\n\n/** If the SDK is initialized & enabled. */\nexport function isEnabled(): boolean {\n  const client = getClient();\n  return client?.getOptions().enabled !== false && !!client?.getTransport();\n}\n\n/**\n * Add an event processor.\n * This will be added to the current isolation scope, ensuring any event that is processed in the current execution\n * context will have the processor applied.\n */\nexport function addEventProcessor(callback: EventProcessor): void {\n  getIsolationScope().addEventProcessor(callback);\n}\n\n/**\n * Start a session on the current isolation scope.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns the new active session\n */\nexport function startSession(context?: SessionContext): Session {\n  const isolationScope = getIsolationScope();\n  const currentScope = getCurrentScope();\n\n  // Will fetch userAgent if called from browser sdk\n  const { userAgent } = GLOBAL_OBJ.navigator || {};\n\n  const session = makeSession({\n    user: currentScope.getUser() || isolationScope.getUser(),\n    ...(userAgent && { userAgent }),\n    ...context,\n  });\n\n  // End existing session if there's one\n  const currentSession = isolationScope.getSession();\n  if (currentSession?.status === 'ok') {\n    updateSession(currentSession, { status: 'exited' });\n  }\n\n  endSession();\n\n  // Afterwards we set the new session on the scope\n  isolationScope.setSession(session);\n\n  return session;\n}\n\n/**\n * End the session on the current isolation scope.\n */\nexport function endSession(): void {\n  const isolationScope = getIsolationScope();\n  const currentScope = getCurrentScope();\n\n  const session = currentScope.getSession() || isolationScope.getSession();\n  if (session) {\n    closeSession(session);\n  }\n  _sendSessionUpdate();\n\n  // the session is over; take it off of the scope\n  isolationScope.setSession();\n}\n\n/**\n * Sends the current Session on the scope\n */\nfunction _sendSessionUpdate(): void {\n  const isolationScope = getIsolationScope();\n  const client = getClient();\n  const session = isolationScope.getSession();\n  if (session && client) {\n    client.captureSession(session);\n  }\n}\n\n/**\n * Sends the current session on the scope to Sentry\n *\n * @param end If set the session will be marked as exited and removed from the scope.\n *            Defaults to `false`.\n */\nexport function captureSession(end: boolean = false): void {\n  // both send the update and pull the session from the scope\n  if (end) {\n    endSession();\n    return;\n  }\n\n  // only send the update\n  _sendSessionUpdate();\n}\n","import type { Primitive } from '../types-hoist/misc';\nimport { isSyntheticEvent, isVueViewModel } from './is';\nimport { convertToPlainObject } from './object';\nimport { getFunctionName } from './stacktrace';\n\ntype Prototype = { constructor?: (...args: unknown[]) => unknown };\n// This is a hack to placate TS, relying on the fact that technically, arrays are objects with integer keys. Normally we\n// think of those keys as actual numbers, but `arr['0']` turns out to work just as well as `arr[0]`, and doing it this\n// way lets us use a single type in the places where behave as if we are only dealing with objects, even if some of them\n// might be arrays.\ntype ObjOrArray<T> = { [key: string]: T };\n\ntype MemoFunc = [\n  // memoize\n  (obj: object) => boolean,\n  // unmemoize\n  (obj: object) => void,\n];\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normalized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function normalize(input: unknown, depth: number = 100, maxProperties: number = +Infinity): any {\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return { ERROR: `**non-serializable** (${err})` };\n  }\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const normalized = normalize(object, depth);\n\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return normalized as T;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(\n  key: string,\n  value: unknown,\n  depth: number = +Infinity,\n  maxProperties: number = +Infinity,\n  memo = memoBuilder(),\n): Primitive | ObjOrArray<unknown> {\n  const [memoize, unmemoize] = memo;\n\n  // Get the simple cases out of the way first\n  if (\n    value == null || // this matches null and undefined -> eqeq not eqeqeq\n    ['boolean', 'string'].includes(typeof value) ||\n    (typeof value === 'number' && Number.isFinite(value))\n  ) {\n    return value as Primitive;\n  }\n\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // From here on, we can assert that `value` is either an object or an array.\n\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n  if ((value as ObjOrArray<unknown>)['__sentry_skip_normalization__']) {\n    return value as ObjOrArray<unknown>;\n  }\n\n  // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n  // We keep a certain amount of depth.\n  // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n  const remainingDepth =\n    typeof (value as ObjOrArray<unknown>)['__sentry_override_normalization_depth__'] === 'number'\n      ? ((value as ObjOrArray<unknown>)['__sentry_override_normalization_depth__'] as number)\n      : depth;\n\n  // We're also done if we've reached the max depth\n  if (remainingDepth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // If the value has a `toJSON` method, we call it to extract more information\n  const valueWithToJSON = value as unknown & { toJSON?: () => unknown };\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      const jsonValue = valueWithToJSON.toJSON();\n      // We need to normalize the return value of `.toJSON()` in case it has circular references\n      return visit('', jsonValue, remainingDepth - 1, maxProperties, memo);\n    } catch {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = (Array.isArray(value) ? [] : {}) as ObjOrArray<unknown>;\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = convertToPlainObject(value as ObjOrArray<unknown>);\n\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);\n\n    numAdded++;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n/* eslint-disable complexity */\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(\n  key: unknown,\n  // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n  // our internal use, it'll do\n  value: Exclude<unknown, string | number | boolean | null>,\n): string {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && (value as { _events: unknown })._events) {\n      return '[Domain]';\n    }\n\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n\n    if (isVueViewModel(value)) {\n      return '[VueViewModel]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n\n    if (typeof value === 'number' && !Number.isFinite(value)) {\n      return `[${value}]`;\n    }\n\n    if (typeof value === 'function') {\n      return `[Function: ${getFunctionName(value)}]`;\n    }\n\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    const objName = getConstructorName(value);\n\n    // Handle HTML Elements\n    if (/^HTML(\\w*)Element$/.test(objName)) {\n      return `[HTMLElement: ${objName}]`;\n    }\n\n    return `[object ${objName}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n/* eslint-enable complexity */\n\nfunction getConstructorName(value: unknown): string {\n  const prototype: Prototype | null = Object.getPrototypeOf(value);\n\n  return prototype?.constructor ? prototype.constructor.name : 'null prototype';\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n\n/**\n * Normalizes URLs in exceptions and stacktraces to a base path so Sentry can fingerprint\n * across platforms and working directory.\n *\n * @param url The URL to be normalized.\n * @param basePath The application base path.\n * @returns The normalized URL.\n */\nexport function normalizeUrlToBase(url: string, basePath: string): string {\n  const escapedBase = basePath\n    // Backslash to forward\n    .replace(/\\\\/g, '/')\n    // Escape RegExp special characters\n    .replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n\n  let newUrl = url;\n  try {\n    newUrl = decodeURI(url);\n  } catch {\n    // Sometime this breaks\n  }\n  return (\n    newUrl\n      .replace(/\\\\/g, '/')\n      .replace(/webpack:\\/?/g, '') // Remove intermediate base path\n      // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n      .replace(new RegExp(`(file://)?/*${escapedBase}/*`, 'ig'), 'app:///')\n  );\n}\n\n/**\n * Helper to decycle json objects\n */\nfunction memoBuilder(): MemoFunc {\n  const inner = new WeakSet<object>();\n  function memoize(obj: object): boolean {\n    if (inner.has(obj)) {\n      return true;\n    }\n    inner.add(obj);\n    return false;\n  }\n\n  function unmemoize(obj: object): void {\n    inner.delete(obj);\n  }\n  return [memoize, unmemoize];\n}\n","import type { Client } from '../client';\nimport { DEFAULT_ENVIRONMENT } from '../constants';\nimport { getGlobalScope } from '../currentScopes';\nimport { notifyEventProcessors } from '../eventProcessors';\nimport type { CaptureContext, ScopeContext } from '../scope';\nimport { Scope } from '../scope';\nimport type { Event, EventHint } from '../types-hoist/event';\nimport type { ClientOptions } from '../types-hoist/options';\nimport type { StackParser } from '../types-hoist/stacktrace';\nimport { applyScopeDataToEvent, mergeScopeData } from './applyScopeDataToEvent';\nimport { getFilenameToDebugIdMap } from './debug-ids';\nimport { addExceptionMechanism, uuid4 } from './misc';\nimport { normalize } from './normalize';\nimport { truncate } from './string';\nimport { dateTimestampInSeconds } from './time';\n\n/**\n * This type makes sure that we get either a CaptureContext, OR an EventHint.\n * It does not allow mixing them, which could lead to unexpected outcomes, e.g. this is disallowed:\n * { user: { id: '123' }, mechanism: { handled: false } }\n */\nexport type ExclusiveEventHintOrCaptureContext =\n  | (CaptureContext & Partial<{ [key in keyof EventHint]: never }>)\n  | (EventHint & Partial<{ [key in keyof ScopeContext]: never }>);\n\n/**\n * Adds common information to events.\n *\n * The information includes release and environment from `options`,\n * breadcrumbs and context (extra, tags and user) from the scope.\n *\n * Information that is already present in the event is never overwritten. For\n * nested objects, such as the context, keys are merged.\n *\n * @param event The original event.\n * @param hint May contain additional information about the original exception.\n * @param scope A scope containing event metadata.\n * @returns A new event with more information.\n * @hidden\n */\nexport function prepareEvent(\n  options: ClientOptions,\n  event: Event,\n  hint: EventHint,\n  scope?: Scope,\n  client?: Client,\n  isolationScope?: Scope,\n): PromiseLike<Event | null> {\n  const { normalizeDepth = 3, normalizeMaxBreadth = 1_000 } = options;\n  const prepared: Event = {\n    ...event,\n    event_id: event.event_id || hint.event_id || uuid4(),\n    timestamp: event.timestamp || dateTimestampInSeconds(),\n  };\n  const integrations = hint.integrations || options.integrations.map(i => i.name);\n\n  applyClientOptions(prepared, options);\n  applyIntegrationsMetadata(prepared, integrations);\n\n  if (client) {\n    client.emit('applyFrameMetadata', event);\n  }\n\n  // Only put debug IDs onto frames for error events.\n  if (event.type === undefined) {\n    applyDebugIds(prepared, options.stackParser);\n  }\n\n  // If we have scope given to us, use it as the base for further modifications.\n  // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n  const finalScope = getFinalScope(scope, hint.captureContext);\n\n  if (hint.mechanism) {\n    addExceptionMechanism(prepared, hint.mechanism);\n  }\n\n  const clientEventProcessors = client ? client.getEventProcessors() : [];\n\n  // This should be the last thing called, since we want that\n  // {@link Scope.addEventProcessor} gets the finished prepared event.\n  // Merge scope data together\n  const data = getGlobalScope().getScopeData();\n\n  if (isolationScope) {\n    const isolationData = isolationScope.getScopeData();\n    mergeScopeData(data, isolationData);\n  }\n\n  if (finalScope) {\n    const finalScopeData = finalScope.getScopeData();\n    mergeScopeData(data, finalScopeData);\n  }\n\n  const attachments = [...(hint.attachments || []), ...data.attachments];\n  if (attachments.length) {\n    hint.attachments = attachments;\n  }\n\n  applyScopeDataToEvent(prepared, data);\n\n  const eventProcessors = [\n    ...clientEventProcessors,\n    // Run scope event processors _after_ all other processors\n    ...data.eventProcessors,\n  ];\n\n  const result = notifyEventProcessors(eventProcessors, prepared, hint);\n\n  return result.then(evt => {\n    if (evt) {\n      // We apply the debug_meta field only after all event processors have ran, so that if any event processors modified\n      // file names (e.g.the RewriteFrames integration) the filename -> debug ID relationship isn't destroyed.\n      // This should not cause any PII issues, since we're only moving data that is already on the event and not adding\n      // any new data\n      applyDebugMeta(evt);\n    }\n\n    if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n      return normalizeEvent(evt, normalizeDepth, normalizeMaxBreadth);\n    }\n    return evt;\n  });\n}\n\n/**\n * Enhances event using the client configuration.\n * It takes care of all \"static\" values like environment, release and `dist`,\n * as well as truncating overly long values.\n *\n * Only exported for tests.\n *\n * @param event event instance to be enhanced\n */\nexport function applyClientOptions(event: Event, options: ClientOptions): void {\n  const { environment, release, dist, maxValueLength = 250 } = options;\n\n  // empty strings do not make sense for environment, release, and dist\n  // so we handle them the same as if they were not provided\n  event.environment = event.environment || environment || DEFAULT_ENVIRONMENT;\n\n  if (!event.release && release) {\n    event.release = release;\n  }\n\n  if (!event.dist && dist) {\n    event.dist = dist;\n  }\n\n  const request = event.request;\n  if (request?.url) {\n    request.url = truncate(request.url, maxValueLength);\n  }\n}\n\n/**\n * Puts debug IDs into the stack frames of an error event.\n */\nexport function applyDebugIds(event: Event, stackParser: StackParser): void {\n  // Build a map of filename -> debug_id\n  const filenameDebugIdMap = getFilenameToDebugIdMap(stackParser);\n\n  event.exception?.values?.forEach(exception => {\n    exception.stacktrace?.frames?.forEach(frame => {\n      if (frame.filename) {\n        frame.debug_id = filenameDebugIdMap[frame.filename];\n      }\n    });\n  });\n}\n\n/**\n * Moves debug IDs from the stack frames of an error event into the debug_meta field.\n */\nexport function applyDebugMeta(event: Event): void {\n  // Extract debug IDs and filenames from the stack frames on the event.\n  const filenameDebugIdMap: Record<string, string> = {};\n  event.exception?.values?.forEach(exception => {\n    exception.stacktrace?.frames?.forEach(frame => {\n      if (frame.debug_id) {\n        if (frame.abs_path) {\n          filenameDebugIdMap[frame.abs_path] = frame.debug_id;\n        } else if (frame.filename) {\n          filenameDebugIdMap[frame.filename] = frame.debug_id;\n        }\n        delete frame.debug_id;\n      }\n    });\n  });\n\n  if (Object.keys(filenameDebugIdMap).length === 0) {\n    return;\n  }\n\n  // Fill debug_meta information\n  event.debug_meta = event.debug_meta || {};\n  event.debug_meta.images = event.debug_meta.images || [];\n  const images = event.debug_meta.images;\n  Object.entries(filenameDebugIdMap).forEach(([filename, debug_id]) => {\n    images.push({\n      type: 'sourcemap',\n      code_file: filename,\n      debug_id,\n    });\n  });\n}\n\n/**\n * This function adds all used integrations to the SDK info in the event.\n * @param event The event that will be filled with all integrations.\n */\nfunction applyIntegrationsMetadata(event: Event, integrationNames: string[]): void {\n  if (integrationNames.length > 0) {\n    event.sdk = event.sdk || {};\n    event.sdk.integrations = [...(event.sdk.integrations || []), ...integrationNames];\n  }\n}\n\n/**\n * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n * Normalized keys:\n * - `breadcrumbs.data`\n * - `user`\n * - `contexts`\n * - `extra`\n * @param event Event\n * @returns Normalized event\n */\nfunction normalizeEvent(event: Event | null, depth: number, maxBreadth: number): Event | null {\n  if (!event) {\n    return null;\n  }\n\n  const normalized: Event = {\n    ...event,\n    ...(event.breadcrumbs && {\n      breadcrumbs: event.breadcrumbs.map(b => ({\n        ...b,\n        ...(b.data && {\n          data: normalize(b.data, depth, maxBreadth),\n        }),\n      })),\n    }),\n    ...(event.user && {\n      user: normalize(event.user, depth, maxBreadth),\n    }),\n    ...(event.contexts && {\n      contexts: normalize(event.contexts, depth, maxBreadth),\n    }),\n    ...(event.extra && {\n      extra: normalize(event.extra, depth, maxBreadth),\n    }),\n  };\n\n  // event.contexts.trace stores information about a Transaction. Similarly,\n  // event.spans[] stores information about child Spans. Given that a\n  // Transaction is conceptually a Span, normalization should apply to both\n  // Transactions and Spans consistently.\n  // For now the decision is to skip normalization of Transactions and Spans,\n  // so this block overwrites the normalized event to add back the original\n  // Transaction information prior to normalization.\n  if (event.contexts?.trace && normalized.contexts) {\n    normalized.contexts.trace = event.contexts.trace;\n\n    // event.contexts.trace.data may contain circular/dangerous data so we need to normalize it\n    if (event.contexts.trace.data) {\n      normalized.contexts.trace.data = normalize(event.contexts.trace.data, depth, maxBreadth);\n    }\n  }\n\n  // event.spans[].data may contain circular/dangerous data so we need to normalize it\n  if (event.spans) {\n    normalized.spans = event.spans.map(span => {\n      return {\n        ...span,\n        ...(span.data && {\n          data: normalize(span.data, depth, maxBreadth),\n        }),\n      };\n    });\n  }\n\n  // event.contexts.flags (FeatureFlagContext) stores context for our feature\n  // flag integrations. It has a greater nesting depth than our other typed\n  // Contexts, so we re-normalize with a fixed depth of 3 here. We do not want\n  // to skip this in case of conflicting, user-provided context.\n  if (event.contexts?.flags && normalized.contexts) {\n    normalized.contexts.flags = normalize(event.contexts.flags, 3, maxBreadth);\n  }\n\n  return normalized;\n}\n\nfunction getFinalScope(scope: Scope | undefined, captureContext: CaptureContext | undefined): Scope | undefined {\n  if (!captureContext) {\n    return scope;\n  }\n\n  const finalScope = scope ? scope.clone() : new Scope();\n  finalScope.update(captureContext);\n  return finalScope;\n}\n\n/**\n * Parse either an `EventHint` directly, or convert a `CaptureContext` to an `EventHint`.\n * This is used to allow to update method signatures that used to accept a `CaptureContext` but should now accept an `EventHint`.\n */\nexport function parseEventHintOrCaptureContext(\n  hint: ExclusiveEventHintOrCaptureContext | undefined,\n): EventHint | undefined {\n  if (!hint) {\n    return undefined;\n  }\n\n  // If you pass a Scope or `() => Scope` as CaptureContext, we just return this as captureContext\n  if (hintIsScopeOrFunction(hint)) {\n    return { captureContext: hint };\n  }\n\n  if (hintIsScopeContext(hint)) {\n    return {\n      captureContext: hint,\n    };\n  }\n\n  return hint;\n}\n\nfunction hintIsScopeOrFunction(hint: CaptureContext | EventHint): hint is Scope | ((scope: Scope) => Scope) {\n  return hint instanceof Scope || typeof hint === 'function';\n}\n\ntype ScopeContextProperty = keyof ScopeContext;\nconst captureContextKeys: readonly ScopeContextProperty[] = [\n  'user',\n  'level',\n  'extra',\n  'contexts',\n  'tags',\n  'fingerprint',\n  'propagationContext',\n] as const;\n\nfunction hintIsScopeContext(hint: Partial<ScopeContext> | EventHint): hint is Partial<ScopeContext> {\n  return Object.keys(hint).some(key => captureContextKeys.includes(key as ScopeContextProperty));\n}\n","import { GLOBAL_OBJ } from './worldwide';\n\ninterface VercelRequestContextGlobal {\n  get?():\n    | {\n        waitUntil?: (task: Promise<unknown>) => void;\n      }\n    | undefined;\n}\n\n/**\n * Function that delays closing of a Vercel lambda until the provided promise is resolved.\n *\n * Vendored from https://www.npmjs.com/package/@vercel/functions\n */\nexport function vercelWaitUntil(task: Promise<unknown>): void {\n  const vercelRequestContextGlobal: VercelRequestContextGlobal | undefined =\n    // @ts-expect-error This is not typed\n    GLOBAL_OBJ[Symbol.for('@vercel/request-context')];\n\n  const ctx = vercelRequestContextGlobal?.get?.();\n\n  if (ctx?.waitUntil) {\n    ctx.waitUntil(task);\n  }\n}\n","import type { Span } from '@sentry/core';\nimport { debug, fill, flush, setHttpStatus } from '@sentry/core';\nimport type { ServerResponse } from 'http';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { ResponseEndMethod, WrappedResponseEndMethod } from '../types';\n\n/**\n * Wrap `res.end()` so that it ends the span and flushes events before letting the request finish.\n *\n * Note: This wraps a sync method with an async method. While in general that's not a great idea in terms of keeping\n * things in the right order, in this case it's safe, because the native `.end()` actually *is* (effectively) async, and\n * its run actually *is* (literally) awaited, just manually so (which reflects the fact that the core of the\n * request/response code in Node by far predates the introduction of `async`/`await`). When `.end()` is done, it emits\n * the `prefinish` event, and only once that fires does request processing continue. See\n * https://github.com/nodejs/node/commit/7c9b607048f13741173d397795bac37707405ba7.\n *\n * Also note: `res.end()` isn't called until *after* all response data and headers have been sent, so blocking inside of\n * `end` doesn't delay data getting to the end user. See\n * https://nodejs.org/api/http.html#responseenddata-encoding-callback.\n *\n * @param span The span tracking the request\n * @param res: The request's corresponding response\n */\nexport function autoEndSpanOnResponseEnd(span: Span, res: ServerResponse): void {\n  const wrapEndMethod = (origEnd: ResponseEndMethod): WrappedResponseEndMethod => {\n    return function sentryWrappedEnd(this: ServerResponse, ...args: unknown[]) {\n      finishSpan(span, this);\n      return origEnd.call(this, ...args);\n    };\n  };\n\n  // Prevent double-wrapping\n  // res.end may be undefined during build when using `next export` to statically export a Next.js app\n  if (res.end && !(res.end as WrappedResponseEndMethod).__sentry_original__) {\n    fill(res, 'end', wrapEndMethod);\n  }\n}\n\n/** Finish the given response's span and set HTTP status data */\nexport function finishSpan(span: Span, res: ServerResponse): void {\n  setHttpStatus(span, res.statusCode);\n  span.end();\n}\n\n/**\n * Flushes pending Sentry events with a 2 second timeout and in a way that cannot create unhandled promise rejections.\n */\nexport async function flushSafelyWithTimeout(): Promise<void> {\n  try {\n    DEBUG_BUILD && debug.log('Flushing events...');\n    await flush(2000);\n    DEBUG_BUILD && debug.log('Done flushing events');\n  } catch (e) {\n    DEBUG_BUILD && debug.log('Error while flushing events:\\n', e);\n  }\n}\n","declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n"],"names":[],"mappings":"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","ignoreList":[4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,22,23,25,26,28,29,30,31,32,34,35,37,38,39,41,42]}