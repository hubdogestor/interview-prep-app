// tailwind.config.ts
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "rgb(var(--background) / <alpha-value>)",
        foreground: "rgb(var(--foreground) / <alpha-value>)",
        primary: "rgb(var(--primary) / <alpha-value>)",
        "primary-foreground": "rgb(var(--primary-foreground) / <alpha-value>)",
        secondary: "rgb(var(--secondary) / <alpha-value>)",
        "secondary-foreground": "rgb(var(--secondary-foreground) / <alpha-value>)",
        accent: "rgb(var(--accent) / <alpha-value>)",
        "accent-foreground": "rgb(var(--accent-foreground) / <alpha-value>)",
        muted: "rgb(var(--muted) / <alpha-value>)",
        "muted-foreground": "rgb(var(--muted-foreground) / <alpha-value>)",
        destructive: "rgb(var(--destructive) / <alpha-value>)",
        "destructive-foreground": "rgb(var(--destructive-foreground, var(--foreground)) / <alpha-value>)",
        "bg-primary": "rgb(var(--bg-primary) / <alpha-value>)",
        "bg-secondary": "rgb(var(--bg-secondary) / <alpha-value>)",
        "bg-tertiary": "rgb(var(--bg-tertiary) / <alpha-value>)",
        "text-primary": "rgb(var(--text-primary) / <alpha-value>)",
        "text-secondary": "rgb(var(--text-secondary) / <alpha-value>)",
        "text-tertiary": "rgb(var(--text-tertiary) / <alpha-value>)",
        "text-muted": "rgb(var(--text-muted) / <alpha-value>)",
        "brand-blue": "rgb(var(--color-blue) / <alpha-value>)",
        "brand-green": "rgb(var(--color-green) / <alpha-value>)",
        "brand-lime": "rgb(var(--color-lime) / <alpha-value>)",
        "brand-orange": "rgb(var(--color-orange) / <alpha-value>)",
        "brand-yellow": "rgb(var(--color-yellow) / <alpha-value>)",
        success: "rgb(var(--semantic-success) / <alpha-value>)",
        warning: "rgb(var(--semantic-warning) / <alpha-value>)",
        error: "rgb(var(--semantic-error) / <alpha-value>)",
        info: "rgb(var(--semantic-info) / <alpha-value>)",
        "border-subtle": "rgb(var(--border-subtle) / <alpha-value>)",
        "border-default": "rgb(var(--border-default) / <alpha-value>)",
        "border-strong": "rgb(var(--border-strong) / <alpha-value>)",
        sidebar: "rgb(var(--sidebar) / <alpha-value>)",
        "sidebar-foreground": "rgb(var(--sidebar-foreground) / <alpha-value>)",
        "sidebar-primary": "rgb(var(--sidebar-primary) / <alpha-value>)",
        "sidebar-primary-foreground": "rgb(var(--sidebar-primary-foreground) / <alpha-value>)",
        "sidebar-accent": "rgb(var(--sidebar-accent) / <alpha-value>)",
        "sidebar-border": "rgb(var(--sidebar-border) / <alpha-value>)",
        "sidebar-ring": "rgb(var(--sidebar-ring) / <alpha-value>)",
      },
      fontFamily: {
        grotesk: ["var(--font-grotesk)", "sans-serif"],
        sans: ["var(--font-sans)", "sans-serif"],
        body: ["var(--font-body)", "sans-serif"],
        mono: ["var(--font-mono)", "monospace"],
      },
      boxShadow: {
        sm: "0 1px 2px rgba(0, 0, 0, 0.3)",
        md: "0 2px 8px rgba(0, 0, 0, 0.4)",
        lg: "0 8px 16px rgba(0, 0, 0, 0.5)",
        xl: "0 16px 32px rgba(0, 0, 0, 0.6)",
      },
      borderRadius: {
        sm: "6px",
        md: "8px",
        lg: "12px",
        xl: "16px",
      },
    },
  },
  plugins: [],
};

export default config;
